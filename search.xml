<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Cocos2d-x引擎基本类解析]]></title>
    <url>%2F2019%2F08%2F25%2FCocos2d-x%E5%BC%95%E6%93%8E%E5%9F%BA%E6%9C%AC%E7%B1%BB%E8%A7%A3%E6%9E%90%2F</url>
    <content type="text"><![CDATA[&#x524D;&#x8A00;Cocos2d-x&#x662F;&#x4E00;&#x6B3E;&#x5E94;&#x7528;&#x5E7F;&#x6CDB;&#x7684;&#x6E38;&#x620F;&#x5F15;&#x64CE;&#xFF0C;&#x7279;&#x70B9;&#x662F;&#x8DE8;&#x5E73;&#x53F0;&#xFF0C;&#x4E3B;&#x8981;&#x7528;&#x6765;&#x8FDB;&#x884C;&#x79FB;&#x52A8;&#x7AEF;&#x7684;&#x6E38;&#x620F;&#x5F00;&#x53D1;&#xFF0C;&#x91C7;&#x7528;&#x8BED;&#x8A00;&#x4E3B;&#x8981;&#x4E3A;C++&#x3001;Lua&#x548C;JavaScript&#x3002; Cocos2d-x&#x7684;&#x7A0B;&#x5E8F;&#x5165;&#x53E3;&#x6587;&#x4EF6;&#x4E3A;&#x5934;&#x6587;&#x4EF6;AppDelegate.h&#x548C;&#x6E90;&#x6587;&#x4EF6;AppDelegate.cpp&#xFF0C;&#x4FDD;&#x5B58;&#x5728;&#x9879;&#x76EE;&#x6587;&#x4EF6;&#x5939;&#x7684;Classes&#x76EE;&#x5F55;&#xFF0C;&#x6587;&#x4EF6;&#x5305;&#x542B;&#x4E86;&#x5F15;&#x64CE;&#x4E3B;&#x8981;&#x7684;&#x7C7B;&#xFF0C;&#x7528;&#x6765;&#x5B9E;&#x73B0;&#x5BF9;&#x521B;&#x5EFA;&#x6E38;&#x620F;&#xFF0C;&#x6E38;&#x620F;&#x8F6C;&#x5230;&#x540E;&#x53F0;&#xFF0C;&#x4EE5;&#x53CA;&#x6E38;&#x620F;&#x4ECE;&#x540E;&#x53F0;&#x8FD4;&#x56DE;&#x7684;&#x5904;&#x7406;&#x3002; &#x672C;&#x7BC7;&#x4F5C;&#x4E3A;Cocos2d-x&#x7684;&#x5B66;&#x4E60;&#x7B14;&#x8BB0;&#xFF0C;&#x91C7;&#x7528;&#x7684;&#x662F;Cocos2d-x-3.17.2&#x7248;&#x672C;&#xFF0C;&#x57FA;&#x4E8E;C++&#x8BED;&#x8A00;&#x5BF9;&#x8BE5;&#x6E38;&#x620F;&#x5F15;&#x64CE;&#x7684;&#x4E3B;&#x8981;&#x6846;&#x67B6;&#x8FDB;&#x884C;&#x5206;&#x6790;&#xFF0C;&#x89E3;&#x91CA;AppDelegate.cpp&#x6587;&#x4EF6;&#x4E2D;&#x6BCF;&#x4E2A;&#x7C7B;&#x662F;&#x5982;&#x4F55;&#x5B9E;&#x73B0;&#x7684;&#x3002; 1. DirectorDirector&#x7C7B;&#x4E5F;&#x53EB;&#x5BFC;&#x6F14;&#x7C7B;&#xFF0C;&#x8BE5;&#x7C7B;&#x626E;&#x6F14;&#x7684;&#x89D2;&#x8272;&#x5C31;&#x5982;&#x540C;&#x5B83;&#x7684;&#x540D;&#x5B57;&#xFF0C;&#x901A;&#x8FC7;&#x5BFC;&#x6F14;&#x8C03;&#x7528;&#x4E0D;&#x540C;&#x7684;&#x573A;&#x666F;&#xFF0C;&#x6765;&#x5B9E;&#x73B0;&#x6E38;&#x620F;&#x4EA7;&#x751F;&#x7684;&#x6548;&#x679C;&#x3002; Director&#x7C7B;&#x7684;&#x5B9A;&#x4E49;&#x5728;CCDirector.cpp&#x6587;&#x4EF6;&#x4E2D;&#xFF0C;&#x6587;&#x4EF6;&#x5F88;&#x957F;&#xFF0C;&#x6709;&#x4E0A;&#x5343;&#x884C;&#x4EE3;&#x7801;&#xFF0C;&#x8FD9;&#x91CC;&#x5C31;&#x4E0D;&#x8BE6;&#x7EC6;&#x5206;&#x6790;&#x4E86;&#xFF0C;&#x4E3B;&#x8981;&#x5B66;&#x4E60;&#x8FD9;&#x4E2A;&#x7C7B;&#x7684;&#x5E38;&#x7528;&#x7684;&#x6210;&#x5458;&#x51FD;&#x6570;&#x7684;&#x529F;&#x80FD;&#x3002;&#x8FD9;&#x4E9B;&#x529F;&#x80FD;&#x4F53;&#x73B0;&#x5728;&#x521B;&#x5EFA;&#x6E38;&#x620F;&#x7684;&#x51FD;&#x6570;&#x4E2D;&#x3002; &#x5728;&#x6E90;&#x6587;&#x4EF6;AppDelegate.cpp&#x4E2D;&#xFF0C;&#x521B;&#x5EFA;&#x6E38;&#x620F;&#x7684;&#x51FD;&#x6570;&#x540D;&#x4E3A;AppDelegate::applicationDidFinishLaunching&#xFF0C;&#x6B64;&#x51FD;&#x6570;&#x7684;&#x5B9A;&#x4E49;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647bool AppDelegate::applicationDidFinishLaunching() { // initialize director auto director = Director::getInstance(); auto glview = director-&gt;getOpenGLView(); if(!glview) {#if (CC_TARGET_PLATFORM == CC_PLATFORM_WIN32) || (CC_TARGET_PLATFORM == CC_PLATFORM_MAC) || (CC_TARGET_PLATFORM == CC_PLATFORM_LINUX) glview = GLViewImpl::createWithRect(&quot;helloworld&quot;, cocos2d::Rect(0, 0, designResolutionSize.width, designResolutionSize.height));#else glview = GLViewImpl::create(&quot;helloworld&quot;);#endif director-&gt;setOpenGLView(glview); } // turn on display FPS director-&gt;setDisplayStats(true); // set FPS. the default value is 1.0/60 if you don&apos;t call this director-&gt;setAnimationInterval(1.0f / 60); // Set the design resolution glview-&gt;setDesignResolutionSize(designResolutionSize.width, designResolutionSize.height, ResolutionPolicy::NO_BORDER); auto frameSize = glview-&gt;getFrameSize(); // if the frame&apos;s height is larger than the height of medium size. if (frameSize.height &gt; mediumResolutionSize.height) { director-&gt;setContentScaleFactor(MIN(largeResolutionSize.height/designResolutionSize.height, largeResolutionSize.width/designResolutionSize.width)); } // if the frame&apos;s height is larger than the height of small size. else if (frameSize.height &gt; smallResolutionSize.height) { director-&gt;setContentScaleFactor(MIN(mediumResolutionSize.height/designResolutionSize.height, mediumResolutionSize.width/designResolutionSize.width)); } // if the frame&apos;s height is smaller than the height of medium size. else { director-&gt;setContentScaleFactor(MIN(smallResolutionSize.height/designResolutionSize.height, smallResolutionSize.width/designResolutionSize.width)); } register_all_packages(); // create a scene. it&apos;s an autorelease object auto scene = HelloWorld::createScene(); // run director-&gt;runWithScene(scene); return true;} &#x521D;&#x59CB;&#x5316;&#x51FD;&#x6570;&#x9996;&#x5148;&#x8981;&#x505A;&#x7684;&#x5C31;&#x662F;&#x521D;&#x59CB;&#x5316;director&#x5BF9;&#x8C61;&#xFF0C;&#x7528;&#x5355;&#x4F8B;&#x7684;&#x65B9;&#x6CD5;&#x83B7;&#x53D6;director&#x5B9E;&#x4F8B;&#xFF0C;&#x5373;auto director = Director::getInstance(); &#x5355;&#x4F8B;&#x7684;&#x51FD;&#x6570;&#x5B9E;&#x73B0;&#x5982;&#x4E0B;&#xFF1A; 1234567891011Director* Director::getInstance(){ if (!s_SharedDirector) { s_SharedDirector = new (std::nothrow) Director; CCASSERT(s_SharedDirector, &quot;FATAL: Not enough memory&quot;); s_SharedDirector-&gt;init(); } return s_SharedDirector;} &#x83B7;&#x53D6;&#x89C6;&#x56FE;&#x7136;&#x540E;&#x4F7F;&#x7528;Director&#x7C7B;&#x7684;getOpenGLView()&#x6210;&#x5458;&#x51FD;&#x6570;&#x83B7;&#x53D6;&#x4E00;&#x4E2A;&#x89C6;&#x56FE;&#xFF0C;&#x5373;auto glview = director-&gt;getOpenGLView(); &#x4F7F;&#x7528;if&#x8BED;&#x53E5;&#x786E;&#x8BA4;&#x89C6;&#x56FE;&#x5EFA;&#x6210;&#x4E86;&#x4E4B;&#x540E;&#xFF0C;&#x8BBE;&#x7F6E;&#x662F;&#x5426;&#x663E;&#x793A;&#x5E27;&#x7387;&#x4FE1;&#x606F;&#xFF0C;&#x5373;director-&gt;setDisplayStats(true);,&#x4E00;&#x822C;&#x8BBE;&#x7F6E;&#x4E3A;true&#xFF0C; &#x8BBE;&#x7F6E;FPS&#xFF0C;&#x5E27;&#x7387;&#x4E3A;60&#x5E27;&#xFF0C;&#x5373;&#x5C4F;&#x5E55;&#x6BCF;&#x79D2;&#x5237;&#x65B0;60&#x6B21; &#x521B;&#x5EFA;&#x573A;&#x666F;&#x5BF9;&#x8C61;&#xFF0C;&#x7136;&#x540E;&#x542F;&#x52A8;&#x573A;&#x666F; &#x51E0;&#x4E2A;&#x5E38;&#x7528;&#x573A;&#x666F;&#x51FD;&#x6570;&#x6709;&#xFF1A; &#x52A0;&#x8F7D;&#x573A;&#x666F; &#x7B2C;&#x4E00;&#x6B21;&#x542F;&#x52A8;&#x573A;&#x666F;&#x7684;&#x65F6;&#x5019;&#x8C03;&#x7528;&#x7684;&#x65B9;&#x6CD5; 123456789/** * Enters the Director&apos;s main loop with the given Scene. * Call it to run only your FIRST scene. * Don&apos;t call it if there is already a running scene. * * It will call pushScene: and then it will call startAnimation * @js NA */void runWithScene(Scene *scene); replace&#x573A;&#x666F; &#x5C06;&#x4E0A;&#x4E00;&#x4E2A;&#x573A;&#x666F;&#x4ECE;&#x5185;&#x5B58;&#x4E2D;&#x91CA;&#x653E;&#xFF0C;&#x52A0;&#x8F7D;&#x53E6;&#x4E00;&#x4E2A;&#x573A;&#x666F; 12345/** Replaces the running scene with a new one. The running scene is terminated. * ONLY call it if there is a running scene. * @js NA */void replaceScene(Scene *scene); push&#x573A;&#x666F; &#x5C06;&#x4E0A;&#x4E00;&#x4E2A;&#x573A;&#x666F;&#x4FDD;&#x7559;&#x5165;&#x6808;&#xFF0C;&#x518D;&#x5C06;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x573A;&#x666F;&#x5165;&#x6808;&#xFF0C;&#x6B64;&#x65B9;&#x6CD5;&#x5E94;&#x8BE5;&#x907F;&#x514D;&#x8FC7;&#x591A;&#x7684;&#x8C03;&#x7528;&#xFF0C;&#x9632;&#x6B62;&#x7ED9;&#x5185;&#x5B58;&#x9020;&#x6210;&#x592A;&#x5927;&#x7684;&#x538B;&#x529B; 1234567/** * Pops out a scene from the stack. * This scene will replace the running one. * The running scene will be deleted. If there are no more scenes in the stack the execution is terminated. * ONLY call it if there is a running scene. */ void popScene(); &#x4E0E;&#x4E4B;&#x5BF9;&#x5E94;&#x7684;&#x8FD8;&#x6709;pop&#x65B9;&#x6CD5;void popScene();&#xFF0C;&#x5B66;&#x8FC7;&#x6808;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x5E94;&#x8BE5;&#x5F88;&#x597D;&#x7406;&#x89E3;&#x3002; 2. Scene&#x7C7B;Scene&#x7C7B;&#x4E5F;&#x53EB;&#x573A;&#x666F;&#x7C7B;&#xFF0C;&#x662F;&#x6E38;&#x620F;&#x4E2D;&#x5173;&#x952E;&#x7684;&#x4E00;&#x73AF;&#xFF0C;&#x6E38;&#x620F;&#x4E2D;&#x7684;&#x4E0D;&#x540C;&#x753B;&#x9762;&#x90FD;&#x662F;&#x901A;&#x8FC7;&#x573A;&#x666F;&#x6765;&#x5B9E;&#x73B0;&#x7684;&#x3002;&#x5728;Cocos2d-x&#x4E2D;&#xFF0C;&#x573A;&#x666F;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x5BB9;&#x5668;&#xFF0C;&#x91CC;&#x9762;&#x53EF;&#x4EE5;&#x5B58;&#x653E;&#x5404;&#x79CD;Node&#xFF0C;Node&#x5305;&#x62EC;&#x7CBE;&#x7075;(Sprite)&#x3001;&#x573A;&#x666F;(Scene)&#x3001;&#x83DC;&#x5355;(Menu)&#x3001;&#x5C42;(Layer)&#xFF0C;&#x5728;&#x573A;&#x666F;&#x8FD9;&#x91CC;&#x6709;&#x201C;&#x5C42;&#x201D;&#x7684;&#x6982;&#x5FF5;&#x3002; &#x5728;Cocos2d-x-3.17.2&#x539F;&#x59CB;&#x7684;&#x7684;helloworld&#x9879;&#x76EE;&#x4E2D;&#xFF0C;HelloWorldScene&#x662F;&#x7531;&#x4E00;&#x4E2A;cocos2d&#x5C01;&#x88C5;&#x7684;&#x573A;&#x666F;&#x7C7B;(Scene)&#x516C;&#x6709;&#x7EE7;&#x627F;&#x800C;&#x6765;&#x7684;&#xFF0C;&#x5BFC;&#x6F14;director&#x901A;&#x8FC7;&#x83B7;&#x53D6;&#x5230;&#x7684;scene&#x5BF9;&#x8C61;&#xFF0C;&#x6765;&#x52A0;&#x8F7D;&#x573A;&#x666F;&#xFF0C;&#x8FD9;&#x4E2A;scene&#x5BF9;&#x8C61;&#x5C31;&#x662F;&#x7531;HelloWorldScene&#x521B;&#x5EFA;&#x7684;&#xFF0C;AppDelegate.cpp&#x6587;&#x4EF6;&#x4E2D;&#x52A0;&#x8F7D;&#x573A;&#x666F;&#x7684;&#x4EE3;&#x7801;&#x5982;&#x4E0B;: 12345// create a scene. it&apos;s an autorelease objectauto scene = HelloWorld::createScene();// rundirector-&gt;runWithScene(scene); &#x8FD9;&#x91CC;&#x4ECB;&#x7ECD;&#x4E00;&#x4E0B;HelloWorldScene&#x7C7B;&#xFF0C;&#x8FD9;&#x4E2A;&#x7C7B;&#x662F;Scene&#x7C7B;&#x7684;&#x6D3E;&#x751F;&#x7C7B;&#xFF0C;&#x5177;&#x5907;&#x573A;&#x666F;&#x7684;&#x4E00;&#x5207;&#x5C5E;&#x6027;&#x548C;&#x65B9;&#x6CD5;&#xFF0C;&#x5E76;&#x5728;&#x6B64;&#x57FA;&#x7840;&#x4E0A;&#xFF0C;&#x7528;&#x6237;&#x53EF;&#x4EE5;&#x5BF9;&#x5B83;&#x6DFB;&#x52A0;&#x65B0;&#x7684;&#x5C5E;&#x6027;&#x548C;&#x65B9;&#x6CD5;&#xFF0C;&#x5934;&#x6587;&#x4EF6;HelloWorldScene.h&#x4E2D;&#xFF0C;&#x5B83;&#x7684;&#x58F0;&#x660E;&#x5982;&#x4E0B;&#xFF1A; 12345678910111213class HelloWorld : public cocos2d::Scene{public: static cocos2d::Scene* createScene(); virtual bool init(); // a selector callback void menuCloseCallback(cocos2d::Ref* pSender); // implement the &quot;static create()&quot; method manually CREATE_FUNC(HelloWorld);}; &#x5176;&#x4E2D;&#xFF0C;static cocos2d::Scene* createScene();&#x5C31;&#x662F;&#x7B80;&#x5355;&#x5730;&#x8C03;&#x7528;&#x7531;Scene&#x7EE7;&#x627F;&#x8FC7;&#x6765;&#x7684;create()&#x65B9;&#x6CD5;&#xFF0C;&#x800C;&#x7528;&#x6237;&#x9700;&#x8981;&#x5173;&#x6CE8;&#x573A;&#x666F;&#x7684;&#x521B;&#x5EFA;&#xFF0C;&#x5173;&#x952E;&#x5728;virtual bool init();&#x7684;&#x5B9A;&#x4E49;&#x4E2D;&#xFF0C;&#x5728;&#x8FD9;&#x4E2A;&#x6210;&#x5458;&#x51FD;&#x6570;&#x4E2D;&#xFF0C;&#x8981;&#x5B9E;&#x73B0;&#x8BE5;&#x573A;&#x666F;&#x7684;&#x521B;&#x5EFA;&#xFF0C;&#x5373;&#x573A;&#x666F;&#x5185;&#x9700;&#x8981;&#x5305;&#x542B;&#x7684;Node&#x7684;&#x521D;&#x59CB;&#x5316;&#xFF0C;&#x90FD;&#x5728;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x4E2D;&#x5B9E;&#x73B0;&#x3002; &#x4EE5;&#x573A;&#x666F;&#x91CC;&#x9762;&#x7684;&#x4E00;&#x4E2A;&#x9000;&#x51FA;&#x6309;&#x94AE;&#x4E3A;&#x4F8B;&#xFF0C;init()&#x51FD;&#x6570;&#x91CC;&#x9762;&#x6240;&#x8981;&#x505A;&#x7684;&#x5927;&#x81F4;&#x6B65;&#x9AA4;&#x4E3A;&#xFF1A; &#x5176;&#x5B83;Node&#x4E5F;&#x662F;&#x7C7B;&#x4F3C;&#x7684;&#x6D41;&#x7A0B;&#xFF0C;&#x6CE8;&#x610F;&#xFF0C;&#x4E00;&#x5B9A;&#x8981;&#x8BB0;&#x5F97;&#x6700;&#x540E;&#x7528;this-&gt;addChild(item)&#x65B9;&#x6CD5;&#x5C06;&#x521B;&#x5EFA;&#x51FA;&#x6765;&#x7684;&#x5BF9;&#x8C61;&#x6DFB;&#x52A0;&#x5230;&#x5F53;&#x524D;&#x7684;&#x573A;&#x666F;&#x4E2D;&#xFF0C;&#x53EF;&#x4EE5;&#x52A0;&#x4E00;&#x4E2A;&#x6574;&#x578B;&#x53C2;&#x6570;&#x8868;&#x793A;&#x4F4D;&#x4E8E;&#x7B2C;&#x51E0;&#x5C42;&#xFF0C;&#x5982;0&#x8868;&#x793A;&#x6700;&#x4E0B;&#x9762;&#x4E00;&#x5C42;&#xFF0C;1&#x5C31;&#x662F;&#x5B83;&#x7684;&#x4E0A;&#x4E00;&#x5C42;&#x3002; 3. Sprite&#x7C7B;Sprite&#x7C7B;&#x4E5F;&#x53EB;&#x7CBE;&#x7075;&#x7C7B;&#xFF0C;&#x7528;&#x6765;&#x88C5;&#x8F7D;&#x6E38;&#x620F;&#x4E2D;&#x7684;&#x7EB9;&#x7406;&#xFF0C;&#x5E76;&#x8FDB;&#x884C;&#x76F8;&#x5E94;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;&#x5728;&#x67D0;&#x4E9B;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x7CBE;&#x7075;&#x53EF;&#x4EE5;&#x770B;&#x4F5C;&#x4E00;&#x5F20;&#x56FE;&#x7247;&#x3002; &#x7CBE;&#x7075;&#x7684;&#x521B;&#x5EFA;&#x5728;HelloWorldScene.cpp&#x6587;&#x4EF6;&#x4E2D;&#xFF0C;&#x521B;&#x5EFA;&#x7CBE;&#x7075;&#x7684;&#x4EE3;&#x7801;&#x5728;&#x6E38;&#x620F;&#x521D;&#x59CB;&#x5316;&#x51FD;&#x6570;HelloWorld::init()&#x4E2D;&#xFF0C;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A; 12345678910111213auto sprite = Sprite::create(&quot;HelloWorld.png&quot;);if (sprite == nullptr){ problemLoading(&quot;&apos;HelloWorld.png&apos;&quot;);}else{ // position the sprite on the center of the screen sprite-&gt;setPosition(Vec2(visibleSize.width/2 + origin.x, visibleSize.height/2 + origin.y)); // add the sprite as a child to this layer this-&gt;addChild(sprite, 0);} &#x5176;&#x4E2D;&#xFF0C;&#x7B2C;1&#x884C;&#x7684;Sprite::create(&quot;HelloWorld.png&quot;)&#x4E3A;&#x7CBE;&#x7075;&#x7C7B;&#x4E2D;&#x7684;&#x9759;&#x6001;&#x51FD;&#x6570;&#xFF0C;&#x7528;&#x6765;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x7CBE;&#x7075;&#xFF0C;&#x53C2;&#x6570;&#x4E3A;&#x56FE;&#x7247;&#x7684;&#x540D;&#x5B57;&#xFF0C;&#x56FE;&#x7247;&#x53EF;&#x4EE5;&#x81EA;&#x5DF1;&#x6539;&#x6210;&#x5176;&#x5B83;&#x7684;&#xFF0C;&#x53EA;&#x8981;&#x628A;&#x56FE;&#x7247;&#x6587;&#x4EF6;&#x4FDD;&#x5B58;&#x5728;&#x9879;&#x76EE;&#x76EE;&#x5F55;&#x4E0B;&#x7684;helloworld\Resources&#x91CC;&#x9762;&#x5C31;&#x597D;&#x4E86;&#x3002;&#x4F8B;&#x5982;&#xFF0C;&#x6211;&#x6539;&#x6210;&#x81EA;&#x5DF1;&#x7684;&#x56FE;&#x7247;&#xFF0C;&#x628A;&#x53C2;&#x6570;&#x4FEE;&#x6539;&#x6210;&#x81EA;&#x5DF1;&#x56FE;&#x7247;&#x7684;&#xFF0C;&#x7F16;&#x8BD1;&#x8FD0;&#x884C;&#xFF0C;&#x6548;&#x679C;&#x5982;&#x4E0B;&#xFF1A; Sprite::create&#x8FD9;&#x4E2A;&#x6210;&#x5458;&#x51FD;&#x6570;&#x5728;CCSprite.cpp&#x6587;&#x4EF6;&#x4E2D;&#x5B9A;&#x4E49;&#xFF0C;&#x8BE5;&#x540D;&#x79F0;&#x7684;&#x51FD;&#x6570;&#x5171;&#x6709;3&#x4E2A;&#xFF0C;&#x5373;&#x51FD;&#x6570;&#x91CD;&#x8F7D;&#xFF0C;3&#x4E2A;&#x51FD;&#x6570;&#x7684;&#x5B9A;&#x4E49;&#x5982;&#x4E0B;&#x6240;&#x793A;&#xFF1A; 1234567891011121314151617181920212223242526272829303132333435Sprite* Sprite::create(const std::string&amp; filename){ Sprite *sprite = new (std::nothrow) Sprite(); if (sprite &amp;&amp; sprite-&gt;initWithFile(filename)) { sprite-&gt;autorelease(); return sprite; } CC_SAFE_DELETE(sprite); return nullptr;}Sprite* Sprite::create(const PolygonInfo&amp; info){ Sprite *sprite = new (std::nothrow) Sprite(); if(sprite &amp;&amp; sprite-&gt;initWithPolygon(info)) { sprite-&gt;autorelease(); return sprite; } CC_SAFE_DELETE(sprite); return nullptr;}Sprite* Sprite::create(const std::string&amp; filename, const Rect&amp; rect){ Sprite *sprite = new (std::nothrow) Sprite(); if (sprite &amp;&amp; sprite-&gt;initWithFile(filename, rect)) { sprite-&gt;autorelease(); return sprite; } CC_SAFE_DELETE(sprite); return nullptr;} &#x5176;&#x4E2D;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x6210;&#x5458;&#x51FD;&#x6570;&#x5C31;&#x662F;&#x4E0A;&#x8FF0;helloworld&#x4E2D;&#x8C03;&#x7528;&#x7684;&#xFF0C;&#x7B2C;&#x4E09;&#x4E2A;&#x51FD;&#x6570;&#x4E0E;&#x5B83;&#x7684;&#x533A;&#x522B;&#x5728;&#x4E8E;&#xFF0C;&#x53C2;&#x6570;&#x591A;&#x4E86;&#x4E00;&#x4E2A;const Rect&amp; rect&#xFF0C;&#x8868;&#x793A;&#x7CBE;&#x7075;&#x53EA;&#x663E;&#x793A;&#x4E00;&#x90E8;&#x5206;&#x7EB9;&#x7406;&#xFF0C;&#x4F8B;&#x5982;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;&#x5B9E;&#x53C2;Rect(100,100,300,200)&#xFF0C;&#x8868;&#x793A;&#x53EA;&#x663E;&#x793A;&#x7CBE;&#x7075;&#x7684;&#x4E00;&#x90E8;&#x5206;&#xFF0C;&#x8FD9;&#x90E8;&#x5206;&#x7684;&#x5DE6;&#x4E0A;&#x89D2;&#x7684;&#x6A2A;&#x5750;&#x6807;&#x4E3A;100&#xFF0C;&#x7EB5;&#x5750;&#x6807;100&#xFF08;&#x8FD9;&#x4E2A;&#x7EB5;&#x5750;&#x6807;&#x662F;&#x4ECE;&#x4E0A;&#x5F80;&#x4E0B;&#x6570;&#x503C;&#x8D8A;&#x5927;&#x7684;&#xFF0C;&#x5750;&#x6807;&#x539F;&#x70B9;&#x662F;&#x5DE6;&#x4E0A;&#x89D2;&#xFF09;&#xFF0C;&#x7EB9;&#x7406;&#x7684;&#x5BBD;&#x5EA6;300&#xFF0C;&#x9AD8;&#x5EA6;200&#x3002;&#x6B64;&#x65F6;&#x518D;&#x8FDB;&#x884C;&#x7F16;&#x8BD1;&#x8FD0;&#x884C;&#xFF0C;&#x6548;&#x679C;&#x5982;&#x4E0B;&#xFF1A; &#x521B;&#x5EFA;&#x4E86;&#x7CBE;&#x7075;&#x4E4B;&#x540E;&#xFF0C;&#x8981;&#x5BF9;&#x5B83;&#x5728;&#x5C4F;&#x5E55;&#x4E0A;&#x8FDB;&#x884C;&#x5B9A;&#x4F4D;&#xFF0C;&#x5373;&#x8FD9;&#x6BB5;&#x4EE3;&#x7801;&#xFF1A; 12// position the sprite on the center of the screensprite-&gt;setPosition(Vec2(visibleSize.width/2 + origin.x, visibleSize.height/2 + origin.y)); &#x5176;&#x4E2D;&#xFF0C;visibleSize&#x662F;&#x901A;&#x8FC7;Director&#x7C7B;&#x83B7;&#x53D6;&#x5F97;&#x5230;&#x7684;&#x5C4F;&#x5E55;&#x53EF;&#x89C6;&#x533A;&#x57DF;&#xFF0C;&#x5373;&#x901A;&#x8FC7;&#x8FD9;&#x884C;&#x4EE3;&#x7801;&#x83B7;&#x53D6;auto visibleSize = Director::getInstance()-&gt;getVisibleSize();&#xFF0C; origin&#x4E5F;&#x662F;&#x901A;&#x8FC7;Director&#x7C7B;&#x83B7;&#x53D6;&#x7684;&#xFF0C;&#x662F;&#x5C4F;&#x5E55;&#x7684;&#x8D77;&#x59CB;&#x70B9;&#x3002; &#x56E0;&#x6B64;&#xFF0C;&#x7CBE;&#x7075;&#x5B9A;&#x4F4D;&#x7684;&#x4FE1;&#x606F;&#x662F;&#x5C4F;&#x5E55;&#x8D77;&#x59CB;&#x5750;&#x6807;+&#x53EF;&#x89C6;&#x533A;&#x57DF;&#x7684;&#x4E00;&#x534A;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x5373;&#x5C4F;&#x5E55;&#x7684;&#x4E2D;&#x5FC3;&#x3002; &#x63A5;&#x4E0B;&#x6765;&#xFF0C;&#x628A;&#x7CBE;&#x7075;&#x4F5C;&#x4E3A;&#x53C2;&#x6570;&#x6DFB;&#x52A0;&#x5230;&#x5C42;&#x5F53;&#x4E2D;&#xFF0C;&#x8BED;&#x53E5;&#x4E3A;this-&gt;addChild(sprite, 0); st=&gt;start op1=&gt;operation: &#x83B7;&#x53D6;&#x4E00;&#x4E2A;&#x83DC;&#x5355;&#x56FE;&#x7247;&#x9879;&#x7C7B;(MenuItemImage)&#x7684;&#x5B9E;&#x4F8B;&#xFF0C;&#x5B83;&#x5C31;&#x662F;&#x6309;&#x94AE; op2=&gt;operation: &#x8BBE;&#x7F6E;&#x6309;&#x94AE;&#x5728;&#x5C4F;&#x5E55;&#x4E0A;&#x7684;&#x4F4D;&#x7F6E; op3=&gt;operation: &#x6839;&#x636E;&#x8FD9;&#x4E2A;&#x6309;&#x94AE;&#x5BF9;&#x8C61;&#xFF0C;&#x83B7;&#x53D6;&#x4E00;&#x4E2A;&#x83DC;&#x5355;&#x7C7B;(Menu)&#x7C7B;&#x7684;&#x5B9E;&#x4F8B; op4=&gt;operation: &#x8BBE;&#x7F6E;&#x83DC;&#x5355;&#x5728;&#x5C4F;&#x5E55;&#x4E0A;&#x7684;&#x4F4D;&#x7F6E; op5=&gt;operation: &#x628A;&#x83DC;&#x5355;&#x6DFB;&#x52A0;&#x5230;&#x5F53;&#x524D;&#x7684;&#x573A;&#x666F;&#x5F53;&#x4E2D; e=&gt;end st-&gt;op1-&gt;op2-&gt;op3-&gt;op4-&gt;op5-&gt;e{&quot;scale&quot;:1,&quot;line-width&quot;:2,&quot;line-length&quot;:50,&quot;text-margin&quot;:10,&quot;font-size&quot;:12} var code = document.getElementById("flowchart-0-code").value; var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value)); var diagram = flowchart.parse(code); diagram.drawSVG("flowchart-0", options);]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二分查找]]></title>
    <url>%2F2019%2F08%2F09%2F%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%2F</url>
    <content type="text"><![CDATA[&#x601D;&#x8DEF;&#x4E8C;&#x5206;&#x67E5;&#x627E;&#xFF0C;&#x9002;&#x7528;&#x4E8E;&#x5DF2;&#x7ECF;&#x6392;&#x597D;&#x5E8F;&#x7684;&#x6570;&#x7EC4;&#xFF0C;&#x6BCF;&#x6B21;&#x53D6;&#x4E2D;&#x95F4;&#x4F4D;&#x7F6E;&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x6BD4;&#x8F83;&#x8BE5;&#x5143;&#x7D20;&#x662F;&#x5426;&#x4E0E;&#x67E5;&#x627E;&#x7684;&#x76EE;&#x6807;&#x76F8;&#x7B49; &#x5982;&#x679C;&#x76F8;&#x7B49;&#xFF0C;&#x5219;&#x627E;&#x5230;&#x4E86;&#xFF1B; &#x5982;&#x679C;&#x76EE;&#x6807;&#x6BD4;&#x4E2D;&#x95F4;&#x4F4D;&#x7F6E;&#x7684;&#x5143;&#x7D20;&#x5C0F;&#xFF0C;&#x90A3;&#x4E48;&#x67E5;&#x627E;&#x8303;&#x56F4;&#x7F29;&#x5C0F;&#x5230;&#x6570;&#x7EC4;&#x7684;&#x524D;&#x534A;&#x6BB5;&#xFF0C;&#x7EE7;&#x7EED;&#x53D6;&#x8303;&#x56F4;&#x5185;&#x4E2D;&#x95F4;&#x4F4D;&#x7F6E;&#x7684;&#x8FDB;&#x884C;&#x6BD4;&#x8F83;&#xFF1B; &#x5982;&#x679C;&#x76EE;&#x6807;&#x6BD4;&#x4E2D;&#x95F4;&#x4F4D;&#x7F6E;&#x7684;&#x5143;&#x7D20;&#x5927;&#xFF0C;&#x90A3;&#x4E48;&#x67E5;&#x627E;&#x8303;&#x56F4;&#x7F29;&#x5C0F;&#x5230;&#x6570;&#x7EC4;&#x7684;&#x540E;&#x534A;&#x6BB5;&#xFF1B;&#x7EE7;&#x7EED;&#x53D6;&#x8303;&#x56F4;&#x5185;&#x4E2D;&#x95F4;&#x4F4D;&#x7F6E;&#x7684;&#x8FDB;&#x884C;&#x6BD4;&#x8F83;&#x3002; &#x5982;&#x679C;&#x67E5;&#x627E;&#x8303;&#x56F4;&#x4E0D;&#x5B58;&#x5728;&#x4E86;&#x8FD8;&#x6CA1;&#x6709;&#x627E;&#x5230;&#xFF0C;&#x90A3;&#x4E48;&#x8868;&#x793A;&#x76EE;&#x6807;&#x4E0D;&#x5728;&#x6570;&#x7EC4;&#x4E2D;&#x3002; &#x7279;&#x70B9;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A;O(logn) &#x53EF;&#x4EE5;&#x7528;&#x8FED;&#x4EE3;&#x6216;&#x8005;&#x9012;&#x5F52;&#x7684;&#x65B9;&#x6CD5;&#x5B9E;&#x73B0; &#x53C2;&#x8003;&#x4EE3;&#x7801;&#x7528;&#x8FED;&#x4EE3;&#x7684;&#x65B9;&#x5F0F;&#x5B9E;&#x73B0;1234567891011121314151617181920//&#x8FED;&#x4EE3;&#x7684;&#x65B9;&#x5F0F;&#x8FDB;&#x884C;&#x4E8C;&#x5206;&#x67E5;&#x627E;bool iteration_binary_search(int* arr, int n, int value){ if (arr == nullptr || n &lt;= 0)//&#x8003;&#x8651;&#x7279;&#x6B8A;&#x60C5;&#x51B5; return false; int left = 0;//&#x67E5;&#x627E;&#x7684;&#x5DE6;&#x8FB9;&#x8303;&#x56F4; int right = n - 1;//&#x67E5;&#x627E;&#x7684;&#x53F3;&#x8FB9;&#x8303;&#x56F4; int mid;//&#x67E5;&#x627E;&#x8303;&#x56F4;&#x7684;&#x4E2D;&#x95F4;&#x4F4D;&#x7F6E; while (left &lt;= right)//&#x5FAA;&#x73AF;&#x6761;&#x4EF6;&#x4E3A;&#x67E5;&#x627E;&#x8303;&#x56F4;&#x5185;&#x6709;&#x5143;&#x7D20; { mid = (left + right) / 2;//&#x53D6;&#x4E2D;&#x95F4;&#x4F4D;&#x7F6E; if (arr[mid] == value)//&#x5982;&#x679C;&#x4E2D;&#x95F4;&#x4F4D;&#x7F6E;&#x627E;&#x5230;&#x4E86;&#xFF0C;&#x5C31;&#x8FD4;&#x56DE;&#x771F; return true; else if (arr[mid] &gt; value)//&#x5982;&#x679C;&#x4E2D;&#x95F4;&#x4F4D;&#x7F6E;&#x7684;&#x5143;&#x7D20;&#x8F83;&#x5927;&#xFF0C;&#x5C31;&#x7F29;&#x5C0F;&#x53F3;&#x8FB9;&#x754C; right = mid - 1; else//&#x5982;&#x679C;&#x4E2D;&#x95F4;&#x4F4D;&#x7F6E;&#x7684;&#x5143;&#x7D20;&#x8F83;&#x5C0F;&#xFF0C;&#x5C31;&#x6539;&#x53D8;&#x5DE6;&#x8FB9;&#x754C; left = mid + 1; } return false;//&#x9000;&#x51FA;&#x5FAA;&#x73AF;&#x4E86;&#x8FD8;&#x6CA1;&#x627E;&#x5230;&#xFF0C;&#x5C31;&#x8FD4;&#x56DE;&#x5047;} &#x7528;&#x9012;&#x5F52;&#x7684;&#x65B9;&#x5F0F;&#x5B9E;&#x73B0;123456789101112131415//&#x7528;&#x9012;&#x5F52;&#x7684;&#x65B9;&#x5F0F;&#x5B9E;&#x73B0;&#x4E8C;&#x5206;&#x67E5;&#x627E;bool recursion_binary_search(int* arr, int left, int right, int value){ if (arr == nullptr)//&#x8003;&#x8651;&#x7279;&#x6B8A;&#x60C5;&#x51B5; return false; if (left &gt; right)//&#x9012;&#x5F52;&#x7684;&#x51FA;&#x53E3; return false; int mid = (left + right) / 2;//&#x53D6;&#x4E2D;&#x95F4;&#x4F4D;&#x7F6E; if (arr[mid] == value)//&#x5982;&#x679C;&#x627E;&#x5230;&#x4E86;&#xFF0C;&#x8FD4;&#x56DE;&#x771F; return true; else if (arr[mid] &gt; value)//&#x5982;&#x679C;&#x4E2D;&#x95F4;&#x4F4D;&#x7F6E;&#x5143;&#x7D20;&#x8F83;&#x5927;&#xFF0C;&#x6539;&#x53D8;&#x53F3;&#x8FB9;&#x754C; return recursion_binary_search(arr, left, mid - 1, value); else//&#x5982;&#x679C;&#x4E2D;&#x95F4;&#x5143;&#x7D20;&#x8F83;&#x5C0F;&#xFF0C;&#x6539;&#x53D8;&#x5DE6;&#x8FB9;&#x754C; return recursion_binary_search(arr, mid + 1, right, value);} &#x6D4B;&#x8BD5;&#x51FD;&#x6570;&#x5C06;&#x4E0A;&#x8FF0;&#x4E24;&#x4E2A;&#x4E8C;&#x5206;&#x67E5;&#x627E;&#x51FD;&#x6570;&#x653E;&#x5165;&#x4E00;&#x4E2A;cpp&#x6587;&#x4EF6;&#x4E2D;&#xFF0C;&#x8FDB;&#x884C;&#x4E3B;&#x51FD;&#x6570;&#x6D4B;&#x8BD5;&#xFF0C;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A; 123456789101112131415161718192021#include&lt;iostream&gt;using namespace std;bool iteration_binary_search(int* arr, int n, int value);//&#x8FED;&#x4EE3;&#x6CD5;bool recursion_binary_search(int* arr, int left, int right, int value);//&#x9012;&#x5F52;&#x6CD5;int main(int argc,char* argv[]){ int arr[10] = { 3,13,15,20,46,66,79,82,98,150 }; int num=13; int is_in; is_in = iteration_binary_search(arr, 10, num); if (is_in) cout &lt;&lt; &quot;Found it.\n&quot;; else cout &lt;&lt; &quot;Not found.\n&quot;; is_in = recursion_binary_search(arr, 0, 9, num); if (is_in) cout &lt;&lt; &quot;Found it.\n&quot;; else cout &lt;&lt; &quot;Not found.\n&quot;; return 0;} &#x6253;&#x5370;&#x7ED3;&#x679C;&#x4E3A; &#x4E8C;&#x5206;&#x67E5;&#x627E;&#x7684;&#x6269;&#x5C55;&#x5229;&#x7528;&#x4E8C;&#x5206;&#x67E5;&#x627E;&#x7684;&#x601D;&#x8DEF;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x89E3;&#x51B3;&#x5176;&#x5B83;&#x7684;&#x4E00;&#x4E9B;&#x95EE;&#x9898;&#xFF0C;&#x4F8B;&#x5982;&#xFF0C;&#x5728;&#x300A;&#x5251;&#x6307;offer&#x300B;&#x4E2D;&#xFF0C;&#x6709;&#x4E24;&#x9053;&#x7F16;&#x7A0B;&#x9898;&#x7684;&#x89E3;&#x6CD5;&#x5C31;&#x662F;&#x5229;&#x7528;&#x4E86;&#x4E8C;&#x5206;&#x67E5;&#x627E;&#x7684;&#x601D;&#x60F3;&#x3002; 1. &#x65CB;&#x8F6C;&#x6570;&#x7EC4;&#x7684;&#x6700;&#x5C0F;&#x6570;&#x5B57;&#x9898;&#x76EE;&#x628A;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x6700;&#x5F00;&#x59CB;&#x7684;&#x82E5;&#x5E72;&#x4E2A;&#x5143;&#x7D20;&#x642C;&#x5230;&#x6570;&#x7EC4;&#x7684;&#x672B;&#x5C3E;&#xFF0C;&#x79F0;&#x4E4B;&#x4E3A;&#x6570;&#x7EC4;&#x7684;&#x65CB;&#x8F6C;&#x3002;&#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x9012;&#x589E;&#x6392;&#x5E8F;&#x7684;&#x6570;&#x7EC4;&#x7684;&#x4E00;&#x4E2A;&#x65CB;&#x8F6C;&#xFF0C;&#x8F93;&#x51FA;&#x65CB;&#x8F6C;&#x6570;&#x7EC4;&#x7684;&#x6700;&#x5C0F;&#x5143;&#x7D20;&#x3002;&#x4F8B;&#x5982;&#x6570;&#x7EC4;{3&#xFF0C;4&#xFF0C;5&#xFF0C;1&#xFF0C;2}&#x4E3A;{1&#xFF0C;2&#xFF0C;3&#xFF0C;4&#xFF0C;5}&#x7684;&#x4E00;&#x4E2A;&#x65CB;&#x8F6C;&#xFF0C;&#x8BE5;&#x6570;&#x7EC4;&#x7684;&#x6700;&#x5C0F;&#x5143;&#x7D20;&#x4E3A;1&#x3002;&#x7ED9;&#x51FA;&#x7684;&#x6240;&#x6709;&#x5143;&#x7D20;&#x90FD;&#x5927;&#x4E8E;0&#xFF0C;&#x82E5;&#x6570;&#x7EC4;&#x5927;&#x5C0F;&#x4E3A;0&#xFF0C;&#x8BF7;&#x8FD4;&#x56DE;0&#x3002; &#x89E3;&#x6CD5;&#x5229;&#x7528;&#x4E8C;&#x5206;&#x67E5;&#x627E;&#x7684;&#x601D;&#x60F3;&#xFF1A; &#x6BCF;&#x6B21;&#x53D6;&#x4E2D;&#x95F4;&#x4F4D;&#x7F6E;&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x5982;&#x679C;&#x4E2D;&#x95F4;&#x5143;&#x7D20;&gt;=&#x6700;&#x5DE6;&#x8FB9;&#x5143;&#x7D20;&#xFF0C;&#x8BF4;&#x660E;&#x5728;&#x9012;&#x589E;&#x533A;&#x95F4;&#xFF0C;&#x6700;&#x5C0F;&#x5143;&#x7D20;&#x5E94;&#x8BE5;&#x5728;&#x540E;&#x534A;&#x6BB5;&#xFF1B;&#x5982;&#x679C;&#x4E2D;&#x95F4;&#x5143;&#x7D20;&lt;&#x6700;&#x5DE6;&#x8FB9;&#x5143;&#x7D20;&#xFF0C;&#x8BF4;&#x660E;&#x6700;&#x5C0F;&#x5143;&#x7D20;&#x5728;&#x5DE6;&#x534A;&#x6BB5;&#x3002; &#x7136;&#x540E;&#x7F29;&#x5C0F;&#x67E5;&#x627E;&#x8303;&#x56F4;&#xFF0C;&#x5E76;&#x7EE7;&#x7EED;&#x53D6;&#x4E2D;&#x95F4;&#x4F4D;&#x7F6E;&#x8FDB;&#x884C;&#x5224;&#x65AD;&#xFF0C;&#x76F4;&#x5230;&#x67E5;&#x627E;&#x8303;&#x56F4;&#x53EA;&#x6709;&#x4E24;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x5219;&#x6B64;&#x65F6;&#x53F3;&#x8FB9;&#x7684;&#x90A3;&#x4E2A;&#x5143;&#x7D20;&#x5C31;&#x662F;&#x6700;&#x5C0F;&#x7684;&#x4E86;&#x3002; &#x8003;&#x8651;&#x7279;&#x6B8A;&#x60C5;&#x51B5;&#xFF1A;&#x5982;&#x679C;&#x4E2D;&#x95F4;&#x5143;&#x7D20;==&#x6700;&#x5DE6;&#x8FB9;&#x5143;&#x7D20;&#xFF0C;&#x4E14;&#x4E2D;&#x95F4;&#x5143;&#x7D20;==&#x6700;&#x53F3;&#x8FB9;&#x5143;&#x7D20;&#xFF0C;&#x5219;&#x65E0;&#x6CD5;&#x5224;&#x65AD;&#xFF0C;&#x9700;&#x8981;&#x4ECE;&#x5DE6;&#x5230;&#x53F3;&#x987A;&#x5E8F;&#x67E5;&#x627E;&#x3002; &#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A; 1234567891011121314151617181920212223242526272829303132class Solution {public: int min_number_in_rotate_array(vector&lt;int&gt; arr) { if(arr.size()&lt;=0)//&#x8003;&#x8651;&#x7279;&#x6B8A;&#x60C5;&#x51B5; return 0; int left=0;//&#x67E5;&#x627E;&#x8303;&#x56F4;&#x5DE6;&#x8FB9;&#x754C; int right=arr.size()-1;//&#x53F3;&#x8FB9;&#x754C; int mid;//&#x8868;&#x793A;&#x4E2D;&#x95F4;&#x4F4D;&#x7F6E;&#x7684;&#x4E0B;&#x6807; while(left&lt;right-1)//&#x5FAA;&#x73AF;&#x9000;&#x51FA;&#x6761;&#x4EF6;&#x4E3A;&#x67E5;&#x627E;&#x8303;&#x56F4;&#x53EA;&#x5269;&#x4E24;&#x4E2A;&#x5143;&#x7D20; { mid=(left+right)/2; if(arr[left]==arr[mid]&amp;&amp;arr[mid]==arr[right])//&#x5982;&#x679C;&#x4E09;&#x4E2A;&#x90FD;&#x76F8;&#x7B49;&#xFF0C;&#x5219;&#x65E0;&#x6CD5;&#x7528;&#x4E8C;&#x5206;&#x6CD5;&#xFF0C;&#x7528;&#x987A;&#x5E8F;&#x67E5;&#x627E; return min_in_order(arr,left,right); if(arr[left]&lt;=arr[mid])//&#x5982;&#x679C;&#x5DE6;&#x7AEF;&#x5143;&#x7D20;&#x6BD4;&#x4E2D;&#x95F4;&#x7684;&#x5C0F;&#x6216;&#x7B49;&#xFF0C;&#x5219;&#x524D;&#x9762;&#x4E00;&#x534A;&#x4E3A;&#x975E;&#x9012;&#x51CF;&#x5E8F;&#x5217;&#xFF0C;&#x67E5;&#x627E;&#x8303;&#x56F4;&#x7F29;&#x5C0F;&#x5230;&#x540E;&#x534A;&#x6BB5; left=mid; else//&#x53CD;&#x4E4B;&#xFF0C;&#x67E5;&#x627E;&#x8303;&#x56F4;&#x7F29;&#x5C0F;&#x5230;&#x524D;&#x534A;&#x6BB5; right=mid; } return arr[right];//&#x67E5;&#x627E;&#x8303;&#x56F4;&#x5185;&#x53EA;&#x5269;&#x4E24;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x53F3;&#x8FB9;&#x7684;&#x5C31;&#x662F;&#x6700;&#x5C0F;&#x7684;&#x4E86; } //&#x987A;&#x5E8F;&#x67E5;&#x627E;&#x7684;&#x51FD;&#x6570; int min_in_order(vector&lt;int&gt; arr,int left,int right) { int min_num=arr[left]; for(int i=left;i&lt;=right;i++) if(arr[i]&lt;min_num) min_num=arr[i]; return min_num; }}; 2. &#x6570;&#x5B57;&#x5728;&#x6392;&#x5E8F;&#x6570;&#x7EC4;&#x4E2D;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#x9898;&#x76EE;&#x7EDF;&#x8BA1;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#x5728;&#x6392;&#x5E8F;&#x6570;&#x7EC4;&#x4E2D;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#x3002;&#x4F8B;&#x5982;&#x8F93;&#x5165;&#x6392;&#x5E8F;&#x6570;&#x7EC4;{1&#xFF0C;2&#xFF0C;3&#xFF0C;3&#xFF0C;3&#xFF0C;3&#xFF0C;4&#xFF0C;5}&#x548C;&#x6570;&#x5B57;3&#xFF0C;&#x7531;&#x4E8E;3&#x51FA;&#x73B0;&#x4E86;4&#x6B21;&#xFF0C;&#x5219;&#x8F93;&#x51FA;&#x7ED3;&#x679C;&#x4E3A;4&#x3002; &#x89E3;&#x6CD5;&#x5229;&#x7528;&#x4E8C;&#x5206;&#x67E5;&#x627E;&#x7684;&#x601D;&#x60F3;&#xFF1A; &#x5148;&#x7528;&#x4E8C;&#x5206;&#x67E5;&#x627E;&#x627E;&#x51FA;&#x76EE;&#x6807;&#x7B2C;&#x4E00;&#x6B21;&#x51FA;&#x73B0;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x518D;&#x7528;&#x4E8C;&#x5206;&#x67E5;&#x627E;&#x627E;&#x51FA;&#x6700;&#x540E;&#x4E00;&#x6B21;&#x51FA;&#x73B0;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x6700;&#x540E;&#x4E24;&#x4E2A;&#x4F4D;&#x7F6E;&#x76F8;&#x51CF;&#x518D;&#x52A0;1&#xFF0C;&#x5C31;&#x662F;&#x76EE;&#x6807;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#x4E86;&#x3002; &#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A; 12345678910111213141516171819202122232425262728293031323334353637383940class Solution {public: int GetNumberOfK(vector&lt;int&gt; data ,int k) { int left = 0;//&#x67E5;&#x627E;&#x7684;&#x5DE6;&#x8FB9;&#x754C; int right = data.size() - 1;//&#x53F3;&#x8FB9;&#x754C; int first = first_idx(data, left, right, k);//&#x627E;&#x51FA;k&#x7B2C;&#x4E00;&#x6B21;&#x51FA;&#x73B0;&#x7684;&#x4F4D;&#x7F6E; if (first == -1)//&#x5982;&#x679C;&#x6CA1;&#x6709;&#x627E;&#x5230;&#xFF0C;&#x5C31;&#x8FD4;&#x56DE;0 return 0; int last = last_idx(data, left, right, k);//&#x627E;&#x51FA;k&#x6700;&#x540E;&#x4E00;&#x6B21;&#x51FA;&#x73B0;&#x7684;&#x4F4D;&#x7F6E; return last - first + 1;//&#x6839;&#x636E;&#x524D;&#x540E;&#x51FA;&#x73B0;&#x7684;&#x4F4D;&#x7F6E;&#x8BA1;&#x7B97;&#x51FA;&#x6B21;&#x6570; } //&#x4E8C;&#x5206;&#x67E5;&#x627E;&#xFF0C;&#x627E;&#x51FA;&#x7B2C;&#x4E00;&#x6B21;&#x51FA;&#x73B0;&#x7684;&#x4F4D;&#x7F6E; int first_idx(vector&lt;int&gt; data, int left, int right, int k) { if (left &gt; right)//&#x9012;&#x5F52;&#x51FA;&#x53E3;&#xFF0C;-1&#x8868;&#x793A;&#x6CA1;&#x627E;&#x5230; return -1; int mid = (left + right) / 2; if (data[mid] == k &amp;&amp; (mid == 0 || (mid &gt; 0 &amp;&amp; data[mid - 1] != k)))//&#x5224;&#x65AD;&#x662F;&#x5426;&#x4E3A;&#x7B2C;&#x4E00;&#x6B21;&#x51FA;&#x73B0;&#x7684;&#x4F4D;&#x7F6E; return mid; else if (data[mid] &lt; k) return first_idx(data, mid + 1, right, k); else return first_idx(data, left, mid - 1, k); } //&#x4E8C;&#x5206;&#x67E5;&#x627E;&#xFF0C;&#x627E;&#x51FA;&#x6700;&#x540E;&#x4E00;&#x6B21;&#x51FA;&#x73B0;&#x7684;&#x4F4D;&#x7F6E; int last_idx(vector&lt;int&gt; data, int left, int right, int k) { if (left &gt; right) return -1; int mid = (left + right) / 2; if (data[mid] == k &amp;&amp; (mid == data.size() - 1 || (mid &lt; data.size() - 1 &amp;&amp; data[mid + 1] != k)))//&#x5224;&#x65AD;&#x662F;&#x5426;&#x6700;&#x540E;&#x4E00;&#x6B21;&#x51FA;&#x73B0; return mid; else if (data[mid] &gt; k) return last_idx(data, left, mid - 1, k); else return last_idx(data, mid + 1, right, k); }};]]></content>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[if语句导致二叉搜索树中插入元素时报错]]></title>
    <url>%2F2019%2F08%2F08%2Fif%E8%AF%AD%E5%8F%A5%E5%AF%BC%E8%87%B4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E6%8F%92%E5%85%A5%E5%85%83%E7%B4%A0%E6%97%B6%E6%8A%A5%E9%94%99%2F</url>
    <content type="text"><![CDATA[&#x524D;&#x8A00;&#x200B; &#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#x662F;&#x4E00;&#x79CD;&#x7279;&#x6B8A;&#x7684;&#x4E8C;&#x53C9;&#x6811;&#xFF0C;&#x7279;&#x70B9;&#x662F;&#x6839;&#x8282;&#x70B9;&#x7684;&#x5DE6;&#x5B50;&#x8282;&#x70B9;&#x6C38;&#x8FDC;&#x6BD4;&#x5B83;&#x5C0F;&#xFF0C;&#x800C;&#x5B83;&#x7684;&#x53F3;&#x5B50;&#x8282;&#x70B9;&#x6C38;&#x8FDC;&#x6BD4;&#x5B83;&#x5927;&#x3002;&#x7528;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#x8FDB;&#x884C;&#x67E5;&#x627E;&#x548C;&#x63D2;&#x5165;&#x901F;&#x5EA6;&#x90FD;&#x5F88;&#x5FEB;&#xFF0C;&#x56E0;&#x6B64;&#x662F;&#x4E00;&#x79CD;&#x5E38;&#x7528;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x3002; &#x200B; &#x7531;&#x4E8E;&#x5B83;&#x7684;&#x7279;&#x6027;&#xFF0C;&#x5728;&#x5B9E;&#x73B0;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x6BD4;&#x5982;&#x63D2;&#x5165;&#x3001;&#x641C;&#x7D22;&#x7684;&#x529F;&#x80FD;&#xFF0C;&#x4F1A;&#x5728;&#x6210;&#x5458;&#x51FD;&#x6570;&#x7684;&#x5B9E;&#x73B0;&#x91CC;&#x7528;&#x5230;&#x5F88;&#x591A;if&#x8BED;&#x53E5;&#xFF0C;&#x7528;&#x6765;&#x5224;&#x65AD;&#x5143;&#x7D20;&#x7684;&#x5927;&#x5C0F;&#x3002;&#x672C;&#x6587;&#x9488;&#x5BF9;if&#x8BED;&#x53E5;&#x9020;&#x6210;&#x7684;&#x95EE;&#x9898;&#x8FDB;&#x884C;&#x5206;&#x6790;&#xFF0C;&#x4EE5;&#x6B64;&#x907F;&#x514D;&#x4ECA;&#x540E;&#x7C7B;&#x4F3C;&#x7684;&#x9519;&#x8BEF;&#x3002; &#x95EE;&#x9898;&#x200B; &#x6267;&#x884C;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#x7684;&#x63D2;&#x5165;&#x51FD;&#x6570;&#xFF0C;&#x8BD5;&#x56FE;&#x5C06;&#x4E00;&#x7CFB;&#x5217;&#x5143;&#x7D20;&#x4F9D;&#x6B21;&#x63D2;&#x5165;&#x4E8C;&#x53C9;&#x6811;&#x4E2D;&#xFF0C;&#x63D2;&#x5165;&#x51FD;&#x6570;&#x5982;&#x4E0B;&#x6240;&#x793A;&#xFF1A; 12345678910111213141516171819202122232425262728293031323334353637/*BinaryTree&lt;T&gt;&#x4E3A;&#x81EA;&#x5DF1;&#x8BBE;&#x8BA1;&#x7684;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#x7684;&#x7C7B;&#xFF0C;&#x6570;&#x636E;&#x6210;&#x5458;root&#x4E3A;&#x6307;&#x5411;&#x6839;&#x8282;&#x70B9;&#x7684;&#x6307;&#x9488;TreeNode&lt;T&gt;&#x4E3A;&#x81EA;&#x5DF1;&#x8BBE;&#x8BA1;&#x7684;&#x8282;&#x70B9;&#x7C7B;&#xFF0C;&#x6570;&#x636E;&#x6210;&#x5458;data&#x4E3A;&#x6570;&#x636E;&#x5143;&#x7D20;&#xFF0C;left_child&#x548C;right_child&#x5206;&#x522B;&#x4E3A;&#x5DE6;&#x53F3;&#x5B50;&#x8282;&#x70B9;&#x7684;&#x6307;&#x9488;&#x4EE5;&#x4E0B;&#x4E3A;&#x6210;&#x5458;&#x51FD;&#x6570;insert&#xFF0C;&#x5C06;&#x53C2;&#x6570;item&#x63D2;&#x5165;&#x5230;&#x4E8C;&#x53C9;&#x6811;&#x4E2D;&#x5408;&#x9002;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x5982;&#x679C;&#x6210;&#x529F;&#x63D2;&#x5165;&#xFF0C;&#x8FD4;&#x56DE;&#x771F;*///&#x63D2;&#x5165;&#x6570;&#x636E;&#x5143;&#x7D20;&#x8282;&#x70B9;template&lt;class T&gt;bool BinaryTree&lt;T&gt;::insert(const T&amp; item){ TreeNode&lt;T&gt;* p = root;//p&#x7528;&#x6765;&#x904D;&#x5386;&#x4E8C;&#x53C9;&#x6811;&#xFF0C;&#x8981;&#x67E5;&#x627E;item&#x8BE5;&#x63D2;&#x5165;&#x7684;&#x4F4D;&#x7F6E; TreeNode&lt;T&gt;* q = 0;//q&#x6307;&#x5411;p&#x7684;&#x6839;&#x7ED3;&#x70B9; while (p) { q = p;//&#x4FDD;&#x5B58;p&#x8282;&#x70B9;&#x7684;&#x6307;&#x9488; if (item == p-&gt;data)//&#x5982;&#x679C;&#x91CD;&#x590D;&#xFF0C;&#x6DFB;&#x52A0;&#x8282;&#x70B9;&#x5931;&#x8D25; return false; if (item &lt; p-&gt;data)//&#x5C0F;&#x4E8E;&#x6839;&#xFF0C;&#x5C31;&#x653E;&#x5DE6;&#x8FB9; p = p-&gt;left_child; if (item &gt; p-&gt;data)//&#x5927;&#x4E8E;&#x6839;&#xFF0C;&#x5C31;&#x653E;&#x53F3;&#x8FB9; p = p-&gt;right_child; } //&#x9000;&#x51FA;&#x5FAA;&#x73AF;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x627E;&#x5230;&#x7684;&#x4F4D;&#x7F6E;&#x5C31;&#x662F;q&#x7684;&#x4E0B;&#x9762; //&#x521B;&#x5EFA;&#x65B0;&#x7684;&#x8282;&#x70B9;&#x5E76;&#x521D;&#x59CB;&#x5316; p = new TreeNode&lt;T&gt;; p-&gt;left_child = 0; p-&gt;right_child = 0; p-&gt;data = item; if (root == 0)//&#x5982;&#x679C;&#x6811;&#x6839;&#x4E3A;NULL&#xFF0C;&#x5C31;&#x76F4;&#x63A5;&#x628A;root&#x6307;&#x5411;&#x65B0;&#x8282;&#x70B9; root = p; else if (item &lt; q-&gt;data) q-&gt;left_child = p; else q-&gt;right_child = p; return true;} &#x200B; &#x4E4D;&#x4E00;&#x770B;&#x6CA1;&#x4EC0;&#x4E48;&#x95EE;&#x9898;&#xFF0C;&#x4E5F;&#x80FD;&#x591F;&#x901A;&#x8FC7;&#x7F16;&#x8BD1;&#xFF0C;&#x751A;&#x81F3;&#x8FD0;&#x884C;&#x7684;&#x65F6;&#x5019;&#x4E5F;&#x80FD;&#x63D2;&#x5165;&#x5143;&#x7D20;&#xFF0C;&#x6BD4;&#x5982;&#xFF1A;&#x5148;&#x63D2;&#x5165;1&#xFF0C;&#x518D;&#x63D2;&#x5165;2&#x3002; 1234BinaryTree&lt;int&gt; btree;bool yes;yes=btree.insert(1);yes=btree.insert(2); &#x200B; &#x7136;&#x800C;&#xFF0C;&#x5982;&#x679C;&#x5148;&#x63D2;&#x5165;2&#xFF0C;&#x518D;&#x63D2;&#x5165;1&#xFF0C;&#x5C31;&#x4F1A;&#x62A5;&#x9519;&#xFF0C;&#x9519;&#x8BEF;&#x51FA;&#x73B0;&#x5728;while&#x8BED;&#x53E5;&#x4E2D;&#x7B2C;&#x4E09;&#x4E2A;if&#x8BED;&#x53E5;if (item &gt; p-&gt;data)&#x8FD9;&#x4E00;&#x884C;&#xFF0C;&#x9519;&#x8BEF;&#x4FE1;&#x606F;&#xFF1A; &#x5F15;&#x53D1;&#x4E86;&#x5F02;&#x5E38;: &#x8BFB;&#x53D6;&#x8BBF;&#x95EE;&#x6743;&#x9650;&#x51B2;&#x7A81;&#x3002;p &#x662F; nullptr&#x3002; &#x95EE;&#x9898;&#x5206;&#x6790;&#x200B; &#x901A;&#x8FC7;&#x5206;&#x6790;&#x53D1;&#x73B0;&#xFF0C;&#x539F;&#x6765;&#x662F;&#x56E0;&#x4E3A;&#x5728;&#x8FD9;&#x6BB5;&#x4EE3;&#x7801;&#x7684;&#x6267;&#x884C;&#x8FC7;&#x7A0B;&#x4E2D; 12345678910while (p){ q = p;//&#x4FDD;&#x5B58;p&#x8282;&#x70B9;&#x7684;&#x6307;&#x9488; if (item == p-&gt;data)//&#x5982;&#x679C;&#x91CD;&#x590D;&#xFF0C;&#x6DFB;&#x52A0;&#x8282;&#x70B9;&#x5931;&#x8D25; return false; if (item &lt; p-&gt;data)//&#x5C0F;&#x4E8E;&#x6839;&#xFF0C;&#x5C31;&#x653E;&#x5DE6;&#x8FB9; p = p-&gt;left_child; if (item &gt; p-&gt;data)//&#x5927;&#x4E8E;&#x6839;&#xFF0C;&#x5C31;&#x653E;&#x53F3;&#x8FB9; p = p-&gt;right_child;} &#x5982;&#x679C;item&#x6BD4;p-&gt;data&#x5C0F;&#xFF0C;&#x4F1A;&#x6267;&#x884C;&#x5B8C;p = p-&gt;left_child;&#x4E4B;&#x540E;&#xFF0C;&#x7EE7;&#x7EED;&#x6267;&#x884C;if&#x8BED;&#x53E5;if (item &gt; p-&gt;data)&#xFF0C;&#x8FD9;&#x662F;&#x7531;&#x4E8E;p&#x5DF2;&#x7ECF;&#x6307;&#x5411;NULL&#x4E86;&#xFF0C;&#x6240;&#x4EE5;&#x65E0;&#x6CD5;&#x5F97;&#x5230;p-&gt;data&#xFF0C;&#x6240;&#x4EE5;&#x7CFB;&#x7EDF;&#x4F1A;&#x629B;&#x51FA;&#x5F02;&#x5E38;&#x3002; &#x89E3;&#x51B3;&#x529E;&#x6CD5;&#x200B; &#x77E5;&#x9053;&#x539F;&#x56E0;&#xFF0C;&#x89E3;&#x51B3;&#x8D77;&#x6765;&#x5C31;&#x5F88;&#x5BB9;&#x6613;&#x4E86;&#xFF0C;&#x53EA;&#x9700;&#x628A;&#x4E0A;&#x9762;&#x7684;while&#x8BED;&#x53E5;&#x4E2D;&#x7684;&#x7B2C;8&#x884C;&#x6539;&#x4E3A;else&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#xFF0C;&#x8FD9;&#x6837;&#x5C31;&#x4E0D;&#x4F1A;&#x5728;item&#x5C0F;&#x4E8E;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x7684;&#x5143;&#x7D20;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x518D;&#x505A;&#x6CA1;&#x6709;&#x610F;&#x4E49;&#x5224;&#x65AD;&#x4E86;&#xFF0C;&#x6539;&#x5B8C;&#x4E4B;&#x540E;&#x7684;while&#x5FAA;&#x73AF;&#x5982;&#x4E0B;&#xFF1A; 12345678910while (p){ q = p;//&#x4FDD;&#x5B58;p&#x8282;&#x70B9;&#x7684;&#x6307;&#x9488; if (item == p-&gt;data)//&#x5982;&#x679C;&#x91CD;&#x590D;&#xFF0C;&#x6DFB;&#x52A0;&#x8282;&#x70B9;&#x5931;&#x8D25; return false; if (item &lt; p-&gt;data)//&#x5C0F;&#x4E8E;&#x6839;&#xFF0C;&#x5C31;&#x653E;&#x5DE6;&#x8FB9; p = p-&gt;left_child; else//&#x5927;&#x4E8E;&#x6839;&#xFF0C;&#x5C31;&#x653E;&#x53F3;&#x8FB9; p = p-&gt;right_child;} &#x200B; &#x6B64;&#x65F6;&#x968F;&#x4FBF;&#x63D2;&#x5165;&#x5143;&#x7D20;&#xFF0C;&#x4E0D;&#x4F1A;&#x518D;&#x62A5;&#x9519; 123456BinaryTree&lt;int&gt; btree;bool yes;yes = btree.insert(2);yes = btree.insert(1);yes = btree.insert(6);yes = btree.insert(4);]]></content>
      <tags>
        <tag>踩坑</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++各种进制的输入输出]]></title>
    <url>%2F2019%2F07%2F22%2FC-%E5%90%84%E7%A7%8D%E8%BF%9B%E5%88%B6%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%2F</url>
    <content type="text"><![CDATA[&#x200B; C++&#x4E2D;&#x6574;&#x6570;&#x7684;&#x8F93;&#x5165;&#x8F93;&#x51FA;&#x5E38;&#x7528;10&#x8FDB;&#x5236;&#x8868;&#x793A;&#xFF0C;&#x5F53;&#x8981;&#x4F7F;&#x7528;&#x4E8C;&#x8FDB;&#x5236;&#x3001;&#x516B;&#x8FDB;&#x5236;&#x3001;&#x5341;&#x516D;&#x8FDB;&#x5236;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x600E;&#x6837;&#x8FDB;&#x884C;&#x8F93;&#x5165;&#x548C;&#x8F93;&#x51FA;&#x64CD;&#x4F5C;&#x5462;&#xFF1F; cin&#x548C;cout&#x7684;&#x64CD;&#x4F5C;&#x200B; &#x5BF9;&#x4E8E;&#x516B;&#x8FDB;&#x5236;&#x548C;&#x5341;&#x516D;&#x8FDB;&#x5236;&#xFF0C;&#x8981;&#x8BB0;&#x4F4F;&#x5173;&#x952E;&#x5B57;oct&#x548C;hex&#xFF0C;&#x8981;&#x5728;&#x8FD0;&#x7B97;&#x7B26;&#x548C;&#x53D8;&#x91CF;&#x4E4B;&#x95F4;&#x6DFB;&#x52A0;&#xFF0C;&#x4EE3;&#x7801;&#x5982;&#x4E0B; 12345678910int num1 = 0;int num2 = 0;cin &gt;&gt; oct &gt;&gt; num1;//&#x4EE5;&#x516B;&#x8FDB;&#x5236;&#x683C;&#x5F0F;&#x8F93;&#x5165;&#xFF0C;&#x5982;&#xFF1A;011&#xFF08;&#x5373;9&#xFF09;cout &lt;&lt; num1 &lt;&lt; endl;//&#x9ED8;&#x8BA4;&#x8F93;&#x51FA;&#x5341;&#x8FDB;&#x5236;&#xFF0C;&#x7ED3;&#x679C;&#x4E3A;&#xFF1A;9cout &lt;&lt; hex &lt;&lt; num1 &lt;&lt; endl;//&#x6539;&#x4E3A;&#x5341;&#x516D;&#x8FDB;&#x5236;&#x8F93;&#x51FA;&#xFF0C;&#x7ED3;&#x679C;&#x4E3A;&#xFF1A;9cin &gt;&gt; hex &gt;&gt; num2;//&#x4EE5;&#x5341;&#x516D;&#x8FDB;&#x5236;&#x683C;&#x5F0F;&#x8F93;&#x5165;&#xFF0C;&#x5982;&#xFF1A;0xF&#xFF08;&#x5373;15&#xFF09;cout &lt;&lt; oct &lt;&lt; num2 &lt;&lt; endl;//&#x516B;&#x8FDB;&#x5236;&#x8F93;&#x51FA;&#xFF0C;&#x7ED3;&#x679C;&#x4E3A;&#xFF1A;17cout &lt;&lt; num2 &lt;&lt; endl;//&#x8F93;&#x51FA;&#x683C;&#x5F0F;&#x8FD8;&#x662F;&#x516B;&#x8FDB;&#x5236;&#xFF1A;17cout &lt;&lt; dec;//&#x8981;&#x624B;&#x52A8;&#x6539;&#x56DE;&#x5341;&#x8FDB;&#x5236; &#x200B; &#x5BF9;&#x4E8E;&#x4E8C;&#x8FDB;&#x5236;&#xFF0C;&#x8981;&#x7528;&#x5230;&#x6807;&#x51C6;&#x5E93;&#x7684;bitset&#xFF0C;&#x4EE3;&#x7801;&#x5982;&#x4E0B; 1234567891011121314151617#include&lt;iostream&gt;#include&lt;bitset&gt;//&#x8981;&#x5305;&#x542B;&#x8FD9;&#x4E2A;bitset&#x5934;&#x6587;&#x4EF6;using namespace std;int main(){ bitset&lt;10&gt; bits;//bits&#x6709;10&#x4F4D;&#xFF08;&#x53EF;&#x6539;&#x4E3A;&#x4EFB;&#x610F;&#x4F4D;&#x6570;&#xFF09;&#xFF0C;&#x521D;&#x59CB;&#x503C;&#x6BCF;&#x4F4D;&#x90FD;&#x662F;0 cin &gt;&gt; bits;//&#x76F4;&#x63A5;&#x8F93;&#x5165;&#x4E8C;&#x8FDB;&#x5236;&#x6570;&#xFF0C;&#x5982;&#xFF1A;10110 cout &lt;&lt;dec&lt;&lt; bits;//&#x8F93;&#x51FA;&#x7684;&#x662F;&#x4E8C;&#x8FDB;&#x5236; cout &lt;&lt; endl; bitset&lt;6&gt; bit2(5);//&#x5229;&#x7528;&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF0C;&#x628A;&#x5341;&#x8FDB;&#x5236;&#x8F6C;&#x6362;&#x6210;&#x4E8C;&#x8FDB;&#x5236; cout &lt;&lt; bit2 &lt;&lt; endl;//&#x7ED3;&#x679C;&#x4E3A;&#xFF1A;000101 cout &lt;&lt;bit2.to_ulong() &lt;&lt; endl;//&#x628A;&#x4E0A;&#x8FF0;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x6570;&#x8F6C;&#x6362;&#x6210;&#x5341;&#x8FDB;&#x5236;&#xFF0C;&#x7ED3;&#x679C;&#x4E3A;&#xFF1A;5 return 0;}]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[string::size_type引起的死循环]]></title>
    <url>%2F2019%2F07%2F10%2Fstring-size-type%E5%BC%95%E8%B5%B7%E7%9A%84%E6%AD%BB%E5%BE%AA%E7%8E%AF%2F</url>
    <content type="text"><![CDATA[&#x200B; &#x5728;C++&#x7684;string&#x7C7B;&#x7684;&#x5E94;&#x7528;&#x4E2D;&#xFF0C;&#x5E38;&#x5E38;&#x4F1A;&#x9700;&#x8981;&#x7528;&#x5230;&#x4E0B;&#x6807;&#x7D22;&#x5F15;&#x8FDB;&#x884C;&#x904D;&#x5386;&#xFF0C;&#x5BF9;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x7684;&#x5B57;&#x7B26;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#x3002;&#x5728;&#x300A;C++ Primer&#x300B;&#x7B2C;&#x4E94;&#x7248;&#x4E2D;&#xFF0C;&#x4ECB;&#x7ECD;&#x4E86;string&#x7C7B;&#x7684;&#x8FED;&#x4EE3;&#x5668;&#xFF0C;&#x5B83;&#x7684;&#x7C7B;&#x578B;&#x662F;string::size_type&#xFF0C;&#x662F;&#x4E2A;&#x65E0;&#x7B26;&#x53F7;&#x7684;&#x7C7B;&#x578B;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x904D;&#x5386;&#x5927;&#x578B;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x8FD9;&#x662F;int&#x578B;&#x7684;&#x8303;&#x56F4;&#x6240;&#x8FBE;&#x4E0D;&#x5230;&#x7684;&#x3002; &#x95EE;&#x9898;&#x200B; &#x7136;&#x800C;&#xFF0C;&#x5728;&#x67D0;&#x4E9B;&#x60C5;&#x51B5;&#x4E2D;&#xFF0C;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;string::size_type&#x7C7B;&#x578B;&#x7684;&#x4E0B;&#x6807;&#xFF0C;&#x4F1A;&#x5BFC;&#x81F4;&#x610F;&#x60F3;&#x4E0D;&#x5230;&#x7684;&#x6B7B;&#x5FAA;&#x73AF;&#x3002; &#x4F8B;&#x5982;&#xFF1A; 1234string str=&quot;test string&quot;;string::size_type index=str.size()-1;//&#x4E0B;&#x6807;&#x4ECE;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x5F00;&#x59CB;for(;index&gt;=0;index--)//&#x4ECE;&#x540E;&#x5F80;&#x524D;&#x904D;&#x5386;&#xFF0C;&#x9006;&#x5E8F;&#x8F93;&#x51FA;&#x6BCF;&#x4E2A;&#x5B57;&#x7B26; cout&lt;&lt;str[index]; &#x8FD9;&#x91CC;&#x7A0B;&#x5E8F;&#x4F1A;&#x62A5;&#x9519;&#xFF01;&#xFF01;&#x8FDB;&#x5165;&#x65E0;&#x9650;&#x5FAA;&#x73AF; &#x200B; &#x539F;&#x56E0;&#x5728;&#x4E8E;string::size_type&#x7C7B;&#x578B;&#x53D8;&#x91CF;index&#x662F;&#x4E00;&#x4E2A;&#x65E0;&#x7B26;&#x53F7;&#x7684;&#x6570;&#xFF0C;&#x4E0D;&#x80FD;&#x7528;index--&#x7684;&#x8BED;&#x53E5;&#x53D8;&#x4E3A;&#x8D1F;&#x6570;&#x3002;&#x56E0;&#x6B64;&#x5FAA;&#x73AF;&#x4F1A;&#x65E0;&#x9650;&#x6267;&#x884C;&#x4E0B;&#x53BB;&#x3002; &#x89E3;&#x51B3;&#x529E;&#x6CD5;&#x200B; &#x5C06;&#x4E0B;&#x6807;index&#x7684;&#x7C7B;&#x578B;&#x5B9A;&#x4E49;&#x6210;&#x5E38;&#x89C4;&#x7684;&#x7C7B;&#x578B;&#xFF0C;&#x53EF;&#x4EE5;&#x5728;&#x9006;&#x5E8F;&#x904D;&#x5386;&#x65F6;&#xFF0C;&#x907F;&#x514D;&#x8FD9;&#x6837;&#x7684;&#x95EE;&#x9898;&#x3002;&#x5982;&#x679C;&#x5B57;&#x7B26;&#x4E32;&#x8F83;&#x5927;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;long long&#x7C7B;&#x578B;&#xFF0C;&#x5B83;&#x662F;C++ 11&#x7684;64&#x4F4D;&#x6574;&#x578B;&#x7684;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#xFF0C;&#x5360;8&#x4E2A;&#x5B57;&#x8282;&#xFF08;&#x800C;int&#x578B;&#x548C;long&#x578B;&#x5360;4&#x4E2A;&#x5B57;&#x8282;&#xFF09;&#xFF0C;long long&#x53EF;&#x4EE5;&#x8868;&#x793A;&#x7684;&#x8303;&#x56F4;&#x662F;[&#x2212;2^63,2^63&#x2212;1]&#x3002; &#x200B; &#x628A;&#x4E0A;&#x9762;&#x4EE3;&#x7801;&#x7684;&#x7B2C;&#x4E8C;&#x884C;&#x6539;&#x4E3A;&#x5982;&#x4E0B;&#x6240;&#x793A; 1long long index=str.size()-1;//&#x5C06;str.size()-1 &#x8F6C;&#x6362;&#x4E3A;long long&#x578B;&#x8D4B;&#x503C;&#x7ED9;index &#x200B; &#x8F93;&#x51FA;&#x7ED3;&#x679C;&#x4E3A;&#xFF1A;gnirts tset]]></content>
      <tags>
        <tag>踩坑</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[归并排序]]></title>
    <url>%2F2019%2F07%2F06%2F%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[&#x601D;&#x8DEF;&#x91C7;&#x7528;&#x5206;&#x6CBB;&#x6CD5;&#xFF0C;&#x5C06;&#x6570;&#x7EC4;&#x4E0D;&#x65AD;&#x4E8C;&#x5206;&#xFF0C;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;&#x5355;&#x72EC;&#x4E3A;&#x4E00;&#x7EC4;&#x4E4B;&#x540E;&#xFF0C;&#x518D;&#x5C06;&#x76F8;&#x90BB;&#x7684;&#x5143;&#x7D20;&#x8FDB;&#x884C;&#x7EC4;&#x5408;&#x3002; &#x7EC4;&#x5408;&#x7684;&#x65F6;&#x5019;&#x7528;&#x4E24;&#x4E2A;&#x4E0B;&#x6807;&#x5BF9;&#x76F8;&#x90BB;&#x4E24;&#x4E2A;&#x6570;&#x7EC4;&#x5206;&#x522B;&#x8FDB;&#x884C;&#x904D;&#x5386;&#xFF0C;&#x4F9D;&#x6B21;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x628A;&#x4E24;&#x4E2A;&#x6570;&#x7EC4;&#x5143;&#x7D20;&#x653E;&#x5165;&#x65B0;&#x7684;&#x6570;&#x7EC4;&#x3002; &#x7279;&#x70B9;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A;&#x6700;&#x4F18;&#x6700;&#x574F;&#x90FD;&#x4E3A;O(nlogn) &#x7A33;&#x5B9A;&#x6027;&#xFF1A;&#x7A33;&#x5B9A; &#x7F3A;&#x70B9;&#xFF1A;&#x9700;&#x8981;&#x989D;&#x5916;&#x7684;&#x7A7A;&#x95F4; &#x53C2;&#x8003;&#x4EE3;&#x7801;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#include&lt;iostream&gt;using namespace std;/*&#x5F52;&#x5E76;&#x51FD;&#x6570;&#x5206;&#x4E3A;&#x4E24;&#x4E2A;&#x51FD;&#x6570;&#xFF1A;&#x4E00;&#x4E2A;&#x7528;&#x6765;&#x5C06;&#x524D;&#x540E;&#x4E24;&#x534A;&#x5DF2;&#x6392;&#x597D;&#x5E8F;&#x7684;&#x6570;&#x7EC4;&#x8FDB;&#x884C;&#x5408;&#x5E76;&#x53E6;&#x4E00;&#x4E2A;&#x7528;&#x6765;&#x5C06;&#x65E0;&#x5E8F;&#x7684;&#x51FD;&#x6570;&#x8FDB;&#x884C;&#x62C6;&#x5206;&#xFF0C;&#x518D;&#x5206;&#x522B;&#x5BF9;&#x524D;&#x540E;&#x4E24;&#x90E8;&#x5206;&#x9012;&#x5F52;&#xFF0C;&#x518D;&#x7528;&#x4E0A;&#x9762;&#x90A3;&#x4E2A;&#x51FD;&#x6570;&#x8FDB;&#x884C;&#x5408;&#x5E76;*///&#x7528;&#x6765;&#x5C06;&#x524D;&#x540E;&#x4E24;&#x90E8;&#x5206;&#x5DF2;&#x6392;&#x597D;&#x5E8F;&#x7684;&#x6570;&#x7EC4;&#x8FDB;&#x884C;&#x5408;&#x5E76;&#x7684;&#x51FD;&#x6570;template&lt;class T&gt;void merge(T* arr, int left, int right){ if (left &gt;= right) return; int mid = (left + right) / 2;//&#x53D6;&#x4E2D;&#x95F4;&#x4F4D;&#x7F6E; int left_size = mid - left + 1;//&#x5DE6;&#x534A;&#x8FB9;&#x6570;&#x7EC4;&#x7684;&#x957F;&#x5EA6; int right_size = right - mid;//&#x53F3;&#x534A;&#x8FB9;&#x6570;&#x7EC4;&#x7684;&#x957F;&#x5EA6; T * p_left = new T[left_size];//&#x7528;&#x6765;&#x5B58;&#x653E;&#x6570;&#x7EC4;&#x524D;&#x534A;&#x90E8;&#x5206; T * p_right = new T[right_size];//&#x7528;&#x6765;&#x5B58;&#x653E;&#x6570;&#x7EC4;&#x540E;&#x534A;&#x90E8;&#x5206; //&#x5F80;&#x65B0;&#x5EFA;&#x6570;&#x7EC4;&#x4E2D;&#x6DFB;&#x52A0;&#x5143;&#x7D20; for (int i = 0; i &lt; left_size; i++) p_left[i] = arr[left + i];//&#x524D;&#x9762;&#x4E00;&#x534A;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x4E0B;&#x6807;&#x4E3A;left for (int i = 0; i &lt; right_size; i++) p_right[i] = arr[mid + 1 + i];//&#x540E;&#x9762;&#x4E00;&#x534A;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x4E0B;&#x6807;&#x4E3A;mid+1 int idx = left;//&#x7528;&#x6765;&#x904D;&#x5386;&#x4E3B;&#x6570;&#x7EC4;&#x7684;&#x4E0B;&#x6807; int idx_left = 0;//&#x7528;&#x6765;&#x904D;&#x5386;&#x5DE6;&#x8FB9;&#x5BB9;&#x5668;&#x7684;&#x4E0B;&#x6807; int idx_right = 0;//&#x7528;&#x6765;&#x904D;&#x5386;&#x53F3;&#x8FB9;&#x5BB9;&#x5668;&#x7684;&#x4E0B;&#x6807; while (idx_left &lt; left_size &amp;&amp; idx_right &lt; right_size)//&#x4EFB;&#x4E00;&#x4E2A;&#x5BB9;&#x5668;&#x904D;&#x5386;&#x5B8C;&#x4E86;&#x5C31;&#x9000;&#x51FA;&#x5FAA;&#x73AF; { //&#x5728;&#x4E24;&#x4E2A;&#x5BB9;&#x5668;&#x4E2D;&#xFF0C;&#x4F9D;&#x6B21;&#x628A;&#x5C0F;&#x7684;&#x5143;&#x7D20;&#x653E;&#x8FDB;&#x539F;&#x6765;&#x7684;&#x6570;&#x7EC4; if (p_left[idx_left] &lt;= p_right[idx_right]) { arr[idx] = p_left[idx_left]; idx++; idx_left++; } else { arr[idx] = p_right[idx_right]; idx++; idx_right++; } } //&#x9000;&#x51FA;&#x5FAA;&#x73AF;&#x65F6;&#xFF0C;&#x5C06;&#x5BB9;&#x5668;&#x4E2D;&#x5269;&#x4E0B;&#x7684;&#x5143;&#x7D20;&#x5168;&#x90E8;&#x653E;&#x5165;&#x539F;&#x6570;&#x7EC4; if (idx_left == left_size) while (idx_right &lt; right_size) { arr[idx] = p_right[idx_right]; idx++; idx_right++; } else while (idx_left &lt; left_size) { arr[idx] = p_left[idx_left]; idx++; idx_left++; } //&#x8981;&#x624B;&#x52A8;&#x91CA;&#x653E;&#x5806;&#x5185;&#x5B58;&#x7A7A;&#x95F4; delete[] p_left; delete[] p_right;}//&#x7528;&#x6765;&#x8FDB;&#x884C;&#x9012;&#x5F52;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x5185;&#x90E8;&#x5305;&#x542B;merge&#x51FD;&#x6570;template&lt;class T&gt;void merge_sort(T* arr, int left, int right){ if (left &gt;= right)//&#x9012;&#x5F52;&#x51FA;&#x53E3; return; int mid = (left + right) / 2; merge_sort(arr, left, mid);//&#x5BF9;&#x524D;&#x534A;&#x90E8;&#x5206;&#x9012;&#x5F52; merge_sort(arr, mid + 1, right);//&#x5BF9;&#x540E;&#x534A;&#x90E8;&#x5206;&#x9012;&#x5F52; merge(arr, left, right);//&#x5BF9;&#x4E24;&#x8FB9;&#x6392;&#x5E8F;&#x597D;&#x4E86;&#x7684;&#x6570;&#x7EC4;&#x8FDB;&#x884C;&#x5408;&#x5E76;}//&#x6D4B;&#x8BD5;&#x4E3B;&#x51FD;&#x6570;int main(int argc,char* argv[]){ int ls[] = { 1,7,3,1,7,0,8,3,3,5,9,6,5,4 }; merge_sort(ls, 0, 13);//&#x8C03;&#x7528;&#x65F6;&#x4E0D;&#x8981;&#x7528;&#x6210;&#x4E86;merge&#x51FD;&#x6570; for (int i = 0; i &lt; 14; i++)cout &lt;&lt; ls[i]; return 0;}]]></content>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[快速排序]]></title>
    <url>%2F2019%2F07%2F02%2F%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[&#x601D;&#x8DEF;&#x9009;&#x53D6;&#x6700;&#x5DE6;&#x8FB9;&#x6570;&#x4E3A;&#x67A2;&#x8F74;&#xFF0C;&#x5B9A;&#x4E49;&#x4E24;&#x4E2A;&#x6E38;&#x6807;i&#x548C;j&#x5206;&#x522B;&#x6307;&#x5411;&#x4E24;&#x7AEF;&#xFF0C;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#x4E34;&#x65F6;&#x5B58;&#x653E;&#x67A2;&#x8F74;&#xFF1B;j&#x5411;&#x5DE6;&#x79FB;&#x627E;&#x51FA;&#x5C0F;&#x4E8E;&#x67A2;&#x8F74;&#x7684;&#x653E;&#x5728;i&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;i&#x5411;&#x53F3;&#x79FB;&#x627E;&#x51FA;&#x5927;&#x4E8E;&#x7B49;&#x4E8E;&#x67A2;&#x8F74;&#x7684;&#x653E;&#x53F3;&#x8FB9;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x4F9D;&#x6B21;&#x4EA4;&#x66FF;&#xFF1B;&#x76F4;&#x5230;i&#x4E0E;j&#x91CD;&#x5408;&#xFF0C;&#x628A;&#x67A2;&#x8F74;&#x8D4B;&#x503C;&#x7ED9;&#x4E2D;&#x95F4;&#x7684;&#x4F4D;&#x7F6E;(&#x5373;i)&#xFF0C;&#x518D;&#x9012;&#x5F52;&#x67A2;&#x8F74;&#x7684;&#x524D;&#x534A;&#x548C;&#x540E;&#x534A;&#x90E8;&#x5206;&#x3002; &#x7279;&#x70B9;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A;&#x5E73;&#x5747;O(nlogn)&#xFF0C;&#x6700;&#x6162;O(n^2) &#x7A33;&#x5B9A;&#x6027;&#xFF1A;&#x4E0D;&#x7A33;&#x5B9A; &#x4F18;&#x70B9;&#xFF1A;&#x5E73;&#x5747;&#x901F;&#x5EA6;&#x5FEB; &#x53C2;&#x8003;&#x4EE3;&#x7801;1234567891011121314151617181920212223242526272829303132333435363738394041424344#include&lt;iostream&gt;using namespace std;template&lt;class T&gt;//&#x7528;&#x51FD;&#x6570;&#x6A21;&#x677F;&#x5B9A;&#x4E49;void quick_sort(T* a, const int left, const int right){ if (left &lt; right)//&#x9012;&#x5F52;&#x51FA;&#x53E3;&#x4E3A;left&gt;=right { //&#x5B9A;&#x4E49;&#x6307;&#x9488;i&#x548C;j&#xFF0C;&#x8FD9;&#x4E24;&#x4E2A;&#x6307;&#x9488;&#x4ECE;&#x4E24;&#x7AEF;&#x5411;&#x4E2D;&#x95F4;&#x79FB;&#x52A8; int i = left; int j = right; T pivot = a[left];//&#x9009;&#x53D6;&#x6700;&#x5DE6;&#x8FB9;&#x7684;&#x5143;&#x7D20;&#x4E3A;&#x57FA;&#x51C6;&#xFF0C;&#x540C;&#x65F6;&#x4E5F;&#x80FD;&#x7ED9;a[i]&#x817E;&#x51FA;&#x4F4D;&#x7F6E; while (i &lt; j) { while (i &lt; j &amp;&amp; a[j] &gt;= pivot)j--;//&#x5927;&#x7684;&#x653E;&#x53F3;&#x8FB9;&#xFF0C;&#x6240;&#x4EE5;&#x4ECE;&#x53F3;&#x5411;&#x5DE6;&#x627E;&#x51FA;&#x6BD4;pivot&#x5C0F;&#x7684;&#x5143;&#x7D20; if (i &lt; j) { a[i] = a[j];//&#x524D;&#x9762;&#x5DF2;&#x7ECF;&#x7ED9;a[i]&#x817E;&#x51FA;&#x4F4D;&#x7F6E;&#x4E86;&#xFF0C;&#x73B0;&#x5728;&#x53EF;&#x4EE5;&#x628A;&#x5C0F;&#x5143;&#x7D20;a[j]&#x653E;&#x5728;a[i]&#x7684;&#x4F4D;&#x7F6E; i++;//i&#x7684;&#x6307;&#x9488;&#x5411;&#x53F3;&#x79FB;&#xFF0C;&#x51C6;&#x5907;&#x540E;&#x7EED;&#x5224;&#x65AD; } while (i &lt; j &amp;&amp; a[i] &lt; pivot)i++;//&#x5C0F;&#x7684;&#x653E;&#x5DE6;&#x8FB9;&#xFF0C;i&#x5411;&#x53F3;&#x79FB;&#x76F4;&#x5230;&#x53D1;&#x73B0;a[i]&#x4E0D;&#x6BD4;pivot&#x5C0F; if (i &lt; j) { a[j] = a[i];//&#x7531;&#x4E8E;&#x524D;&#x9762;a[j]&#x7684;&#x503C;&#x8D4B;&#x503C;&#x7ED9;&#x4E86;&#x524D;&#x9762;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x6240;&#x4EE5;a[j]&#x7684;&#x4F4D;&#x7F6E;&#x7A7A;&#x51FA;&#x6765;&#x4E86; j--;//j&#x7684;&#x6307;&#x9488;&#x5411;&#x5DE6;&#x79FB;&#xFF0C;&#x51C6;&#x5907;&#x4E0B;&#x4E00;&#x8F6E;&#x7684;&#x5FAA;&#x73AF; } } a[i] = pivot;//&#x5F53;i=j&#x7684;&#x65F6;&#x5019;&#x9000;&#x51FA;&#x5FAA;&#x73AF;&#xFF0C;&#x6B64;&#x65F6;&#x7684;a[i]&#x662F;&#x7A7A;&#x51FA;&#x7684;&#x4F4D;&#x7F6E; quick_sort(a, left, i - 1); quick_sort(a, i + 1, right); }}//&#x6D4B;&#x8BD5;&#x51FD;&#x6570;int main(int argc, char* argv[]){ int k[] = { 6,4,2,8,5,7,2,3,9,0,1 }; for (int i = 0; i &lt;= 10; i++) cout &lt;&lt; k[i]; cout &lt;&lt; endl;//&#x8F93;&#x51FA;&#x4E3A;64285723901 quick_sort(k, 0, 10); for (int i = 0; i &lt;= 10; i++) cout &lt;&lt; k[i]; cout &lt;&lt; endl;//&#x8F93;&#x51FA;&#x4E3A;01223456789 return 0;}]]></content>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[插入排序]]></title>
    <url>%2F2019%2F06%2F28%2F%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[&#x601D;&#x8DEF;&#x4ECE;&#x7B2C;&#x4E8C;&#x4E2A;&#x5143;&#x7D20;&#x5F00;&#x59CB;&#xFF0C;&#x4E0E;&#x5B83;&#x524D;&#x9762;&#x7684;&#x5143;&#x7D20;&#x8FDB;&#x884C;&#x6BD4;&#x8F83;&#xFF0C;&#x5982;&#x679C;&#x5C0F;&#xFF0C;&#x5C31;&#x4EA4;&#x6362;&#xFF0C;&#x8FD9;&#x6837;&#x524D;&#x4E24;&#x4E2A;&#x5143;&#x7D20;&#x662F;&#x6709;&#x5E8F;&#x7684;&#x4E86;&#xFF0C; &#x518D;&#x770B;&#x7B2C;&#x4E09;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x5C06;&#x5B83;&#x4E0E;&#x524D;&#x9762;&#x7684;&#x5143;&#x7D20;&#x6BD4;&#x8F83;&#xFF0C;&#x5982;&#x679C;&#x5C0F;&#xFF0C;&#x5C31;&#x5F80;&#x524D;&#x6362;&#xFF0C;&#x76F4;&#x5230;&#x78B0;&#x5230;&#x6BD4;&#x5B83;&#x5C0F;&#x6216;&#x76F8;&#x7B49;&#x7684;&#x4E3A;&#x6B62;&#xFF0C; &#x518D;&#x770B;&#x7B2C;&#x56DB;&#x4E2A;&#x5143;&#x7D20;&#x2026;&#x2026;&#x76F4;&#x5230;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x4E5F;&#x627E;&#x5230;&#x4E86;&#x5B83;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x6392;&#x5E8F;&#x5B8C;&#x6210;&#x3002; &#x7279;&#x70B9;&#x4E0E;&#x5192;&#x6CE1;&#x3001;&#x9009;&#x62E9;&#x6392;&#x5E8F;&#x540C;&#x4E3A;&#x4F4E;&#x7EA7;&#x6392;&#x5E8F; &#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A;&#x5E73;&#x5747;&#x548C;&#x6700;&#x574F;&#x4E3A;O(n^2)&#xFF0C;&#x6700;&#x4F18;&#x4E3A;O(n) &#x7A33;&#x5B9A;&#x6027;&#xFF1A;&#x7A33;&#x5B9A; &#x53C2;&#x8003;&#x4EE3;&#x7801;1234567891011121314151617181920212223242526272829303132#include&lt;iostream&gt;using namespace std;//&#x628A;&#x9009;&#x62E9;&#x6392;&#x5E8F;&#x7684;&#x51FD;&#x6570;&#x505A;&#x6210;&#x51FD;&#x6570;&#x6A21;&#x677F;template&lt;class T&gt;void Insertion_sort(T* a, int n){ int in, out; //&#x5916;&#x5C42;&#x5FAA;&#x73AF;&#xFF0C;&#x662F;&#x9009;&#x53D6;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x5C06;&#x5B83;&#x5F80;&#x5B83;&#x524D;&#x9762;&#x7684;&#x6709;&#x5E8F;&#x6570;&#x7EC4;&#x91CC;&#x9762;&#x63D2;&#x5165; for (out = 1; out &lt; n; out++) { T temp = a[out];//&#x4ECE;&#x7B2C;&#x4E8C;&#x4E2A;&#x5143;&#x7D20;&#x5F00;&#x59CB;&#xFF0C;&#x628A;&#x8FD9;&#x4E2A;&#x5143;&#x7D20;&#x63D0;&#x51FA;&#x6765;&#xFF0C;&#x51C6;&#x5907;&#x540E;&#x7EED;&#x6BD4;&#x8F83; in = out;//&#x8FD9;&#x91CC;&#x5148;&#x8BA9;in&#x4E3A;&#x63D0;&#x51FA;&#x6765;&#x7684;&#x5143;&#x7D20;&#x7684;&#x7D22;&#x5F15;&#xFF0C;&#x51C6;&#x5907;&#x5F00;&#x59CB;&#x5FAA;&#x73AF; while (in &gt; 0 &amp;&amp; a[in - 1] &gt; temp)//&#x7D22;&#x5F15;&#x5230;&#x5934;&#x4E86;&#x6216;&#x8005;&#x524D;&#x9762;&#x7684;&#x5143;&#x7D20;&#x6BD4;temp&#x5C0F;&#xFF0C;&#x5C31;&#x4E0D;&#x518D;&#x64CD;&#x4F5C;&#x4E86; { a[in] = a[in - 1];//&#x5982;&#x679C;&#x524D;&#x9762;&#x7684;&#x5143;&#x7D20;&#x6BD4;temp&#x5927;&#xFF0C;&#x5C31;&#x628A;&#x524D;&#x9762;&#x7684;&#x5143;&#x7D20;&#x5F80;&#x5B83;&#x540E;&#x9762;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x8D4B;&#x503C; in--;//&#x7D22;&#x5F15;&#x5F80;&#x524D;&#x79FB;&#x4E00;&#x4F4D;&#xFF0C;&#x51C6;&#x5907;&#x4E0B;&#x6B21;&#x5224;&#x65AD; } a[in] = temp;//&#x628A;&#x5B58;&#x653E;&#x5728;temp&#x7684;&#x5143;&#x7D20;&#x653E;&#x5728;&#x5408;&#x9002;&#x7684;&#x4F4D;&#x7F6E; }}//&#x6D4B;&#x8BD5;&#x4E3B;&#x51FD;&#x6570;int main(int argv,char* argc[]){ int ls[] = { 5,2,6,8,9,4,3,1,0,7 }; insertion_sort(ls, 10); for (int i = 0; i &lt; 10; i++) cout &lt;&lt; ls[i]; cout &lt;&lt; endl; return 0;}]]></content>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++迭代器的总结]]></title>
    <url>%2F2019%2F06%2F25%2FC-%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[C++&#x8FED;&#x4EE3;&#x5668;&#x662F;&#x7528;&#x6765;&#x904D;&#x5386;&#x5BB9;&#x5668;&#xFF08;vector&#xFF0C;set&#xFF0C;list&#xFF0C;map&#x7B49;&#xFF09;&#x7684;&#x5DE5;&#x5177;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x904D;&#x5386;string&#xFF0C;&#x53EF;&#x4EE5;&#x628A;&#x5B83;&#x5F53;&#x4F5C;&#x6307;&#x9488;&#x6765;&#x7406;&#x89E3;&#xFF0C;&#x6839;&#x636E;&#x4E0D;&#x540C;&#x7684;&#x5BB9;&#x5668;&#xFF0C;&#x7528;&#x6CD5;&#x5982;&#x4E0B;&#xFF1A; vector&#x83B7;&#x53D6;&#x8FED;&#x4EE3;&#x5668;&#x5BF9;&#x4E8E;&#x4E00;&#x4E2A;&#x5DF2;&#x7ECF;&#x521D;&#x59CB;&#x5316;&#x4E86;&#x7684;vector&#x5BF9;&#x8C61;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4EE5;&#x4E0B;&#x8BED;&#x53E5;&#x83B7;&#x53D6;&#x8FED;&#x4EE3;&#x5668;&#xFF1A; 1vector&lt;int&gt;:: iterator iter = vt.begin(); &#x5176;&#x4E2D;&#xFF1A; vector&lt;int&gt;:: iterator&#x662F;&#x8FED;&#x4EE3;&#x5668;&#x7684;&#x7C7B;&#x578B;&#xFF1B; vt&#x662F;&#x5BB9;&#x5668;&#x7684;&#x5BF9;&#x8C61;&#x540D;&#x79F0;&#xFF1B; iter&#x662F;&#x8FED;&#x4EE3;&#x5668;&#x7684;&#x540D;&#x79F0;&#xFF0C;&#x521D;&#x59CB;&#x6307;&#x5411;&#x5BB9;&#x5668;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x3002; &#x901A;&#x8FC7;&#x8FED;&#x4EE3;&#x5668;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#x987A;&#x5E8F;&#x904D;&#x5386;vector&#x5BB9;&#x5668;&#x4E2D;&#x7684;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x5BF9;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;&#x8FDB;&#x884C;&#x6253;&#x5370;&#xFF1A; 1234for (auto iter = vt.begin(); iter!=vt.end(); iter++) { cout &lt;&lt; *iter &lt;&lt; endl; } &#x5176;&#x4E2D;&#xFF1A; *iter&#x662F;vt&#x4E2D;&#x904D;&#x5386;&#x5230;&#x7684;&#x5F53;&#x524D;&#x5143;&#x7D20;&#xFF0C;&#x5728;&#x6574;&#x4E2A;for&#x5FAA;&#x73AF;&#x4E2D;&#xFF0C;&#x4ECE;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5F00;&#x59CB;&#xFF0C;&#x5230;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x7ED3;&#x675F;&#xFF1B; vt.end()&#x662F;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x4E0B;&#x4E00;&#x4E2A;&#x4F4D;&#x7F6E;&#xFF0C;&#x56E0;&#x6B64;&#x4E0D;&#x5305;&#x62EC;&#x5B83;&#xFF1B; &#x9006;&#x5E8F;&#x904D;&#x5386;vector&#x5BB9;&#x5668;&#x4E2D;&#x7684;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x5BF9;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;&#x8FDB;&#x884C;&#x6253;&#x5370;&#xFF1A; 12345for ( vector&lt;int&gt;:: reverse_iterator iter = vt.rbegin(); iter!=vt.rend(); iter++) { cout &lt;&lt; *iter &lt;&lt; endl; } &#x5176;&#x4E2D;&#xFF1A; vector&lt;int&gt;:: reverse_iterator&#x4E3A;&#x9006;&#x5411;&#x904D;&#x5386;&#x7684;&#x8FED;&#x4EE3;&#x5668;&#x7684;&#x7C7B;&#x578B;&#xFF1B; vt.rbegin()&#x4E3A;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF1B; vt.rend()&#x4E3A;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x4E0B;&#x4E00;&#x4E2A;&#x4F4D;&#x7F6E;&#xFF08;&#x53EF;&#x4EE5;&#x7406;&#x89E3;&#x4E3A;&#x524D;&#x4E00;&#x4E2A;&#x4F4D;&#x7F6E;&#xFF09; &#x6CE8;&#x610F;&#xFF01;&#xFF01; iter&#x4ECD;&#x7136;&#x6BCF;&#x6B21;&#x589E;&#x52A0;&#x4E00;&#xFF0C;&#x4E0D;&#x8981;&#x8BA4;&#x4E3A;&#x662F;&#x9006;&#x5E8F;&#x904D;&#x5386;&#x5C31;&#x6BCF;&#x6B21;&#x51CF;&#x4E00;]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[选择排序]]></title>
    <url>%2F2019%2F06%2F11%2F%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[&#x601D;&#x8DEF;&#x9009;&#x62E9;&#x6392;&#x5E8F;&#xFF0C;&#x4ECE;&#x5F53;&#x524D;&#x672A;&#x6392;&#x5E8F;&#x7684;&#x6570;&#x7EC4;&#x4E2D;&#xFF0C;&#x627E;&#x51FA;&#x6700;&#x5C0F;&#x7684;&#x4E00;&#x4E2A;&#x6570;&#xFF0C;&#x628A;&#x5B83;&#x653E;&#x5728;&#x6700;&#x5DE6;&#x8FB9;&#xFF0C;&#x518D;&#x627E;&#x51FA;&#x7B2C;&#x4E8C;&#x5C0F;&#x7684;&#xFF0C;&#x653E;&#x5728;&#x5DE6;&#x8FB9;&#x7B2C;&#x4E8C;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x4EE5;&#x6B64;&#x7C7B;&#x63A8; &#x7279;&#x70B9;&#x548C;&#x5192;&#x6CE1;&#x6392;&#x5E8F;&#x5C5E;&#x4E8E;&#x4E00;&#x4E2A;&#x6863;&#x6B21;&#xFF0C;&#x5F88;&#x4F4E;&#x7EA7;&#xFF0C;&#x867D;&#x7136;&#x6BD4;&#x5B83;&#x5F3A;&#x4E00;&#x70B9; &#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A;O(n^2) &#x7A33;&#x5B9A;&#x6027;&#xFF1A;&#x4E0D;&#x7A33;&#x5B9A; &#x53C2;&#x8003;&#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536#include&lt;iostream&gt;using namespace std;void selection_sort(int* arr, const int n){ //j&#x8868;&#x793A;&#xFF1A;&#x5728;&#x8FD9;&#x4E2A;&#x5FAA;&#x73AF;&#x4F53;&#x4E2D;&#xFF0C;&#x8981;&#x628A;&#x672A;&#x6392;&#x5E8F;&#x7684;&#x6700;&#x5C0F;&#x5143;&#x7D20;&#x653E;&#x5728;arr[j]&#x7684;&#x4F4D;&#x7F6E; //&#x56E0;&#x6B64;&#xFF0C;&#x53EA;&#x9700;&#x904D;&#x5386;&#x5230;&#x5012;&#x6570;&#x7B2C;&#x4E8C;&#x4E2A;&#x5143;&#x7D20; for (int j = 0; j &lt; n - 1; j++) { //min&#x4E3A;&#x4E0B;&#x6807;&#xFF0C;&#x7528;&#x6765;&#x8BB0;&#x5F55;&#x672A;&#x6392;&#x5E8F;&#x90E8;&#x5206;&#x7684;&#x6700;&#x5C0F;&#x6570;&#xFF0C;&#x521D;&#x59CB;&#x5316;&#x4E3A;&#x5F53;&#x524D;&#x7B2C;&#x4E00;&#x4E2A;&#x6570; int min = j; //&#x4ECE;&#x5F53;&#x524D;&#x7B2C;&#x4E8C;&#x4E2A;&#x6570;&#x5F00;&#x59CB;&#x904D;&#x5386;&#xFF0C;&#x76F4;&#x5230;&#x6570;&#x7EC4;&#x672B;&#x5C3E;&#xFF0C;&#x627E;&#x51FA;&#x8FD9;&#x6BB5;&#x533A;&#x95F4;&#x5185;&#x6700;&#x5C0F;&#x7684;&#x6570; for (int i = j + 1; i &lt; n; i++) { if (arr[i] &lt; arr[min]) min = i; } //&#x5C06;&#x6700;&#x5C0F;&#x7684;&#x6570;&#x653E;&#x5728;&#x5F53;&#x524D;&#x672A;&#x6392;&#x5E8F;&#x6570;&#x7EC4;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x4F4D;&#x7F6E; swap(arr[j], arr[min]); }}//&#x6D4B;&#x8BD5;&#x4E3B;&#x51FD;&#x6570;int main(int argc,char* argv[]){ cout &lt;&lt; &quot;&#x9009;&#x62E9;&#x6392;&#x5E8F;:&quot; &lt;&lt; endl; int x[] = { 6,1,5,9,1,4,0,7,3,2 }; for (int i = 0; i &lt; 10; i++) cout &lt;&lt; x[i]; cout &lt;&lt; endl; selection_sort(x, 10);//&#x7B2C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x4E3A;&#x6307;&#x9488;&#xFF0C;x&#x6307;&#x5411;&#x6570;&#x7EC4;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20; for (int i=0; i &lt; 10; i++) cout &lt;&lt; x[i]; cout &lt;&lt; endl; return 0;}]]></content>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[冒泡排序]]></title>
    <url>%2F2019%2F06%2F01%2F%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[&#x601D;&#x8DEF;&#x4ECE;&#x5DE6;&#x8FB9;&#x5F00;&#x59CB;&#x4E24;&#x4E2A;&#x76F8;&#x90BB;&#x7684;&#x6570;&#x6BD4;&#x8F83;&#xFF0C;&#x9009;&#x62E9;&#x6700;&#x5927;&#x7684;&#x6570;&#x636E;&#x653E;&#x5728;&#x53F3;&#x8FB9;&#xFF0C;&#x6B64;&#x65F6;&#x7B2C;&#x4E8C;&#x4E2A;&#x6570;&#x4E3A;&#x5927;&#x7684;&#xFF0C;&#x7136;&#x540E;&#x628A;&#x7B2C;&#x4E8C;&#x4E2A;&#x6570;&#x4E0E;&#x7B2C;&#x4E09;&#x4E2A;&#x6570;&#x6BD4;&#x8F83;&#xFF0C;&#x9009;&#x62E9;&#x5927;&#x7684;&#x653E;&#x53F3;&#x8FB9;&#xFF0C;&#x6B64;&#x65F6;&#x7B2C;&#x4E09;&#x4E2A;&#x6570;&#x4E3A;&#x5927;&#x7684;&#xFF0C;&#x7136;&#x540E;&#x6BD4;&#x8F83;&#x7B2C;&#x4E09;&#x4E2A;&#x548C;&#x7B2C;&#x56DB;&#x4E2A;&#xFF0C;&#x4EE5;&#x6B64;&#x7C7B;&#x63A8;&#xFF0C;&#x76F4;&#x5230;&#x53F3;&#x7AEF;&#xFF0C;&#x6B64;&#x65F6;&#x6570;&#x7EC4;&#x4E2D;&#x6700;&#x5927;&#x7684;&#x6570;&#x5728;&#x6700;&#x53F3;&#x4E86;&#x3002;&#x7136;&#x540E;&#xFF0C;&#x91CD;&#x590D;&#x6700;&#x5F00;&#x59CB;&#x7684;&#x6BD4;&#x8F83;&#xFF0C;&#x4ECE;&#x5DE6;&#x5230;&#x53F3;&#x627E;&#x51FA;&#x6700;&#x5927;&#x7684;&#x6570;&#x653E;&#x5728;&#x53F3;&#x7AEF;&#x7B2C;&#x4E8C;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x7136;&#x540E;&#xFF0C;&#x518D;&#x6B21;&#x91CD;&#x590D;&#x6700;&#x5F00;&#x59CB;&#x7684;&#x6BD4;&#x8F83;&#xFF0C;&#x627E;&#x51FA;&#x53F3;&#x7AEF;&#x7B2C;&#x4E09;&#x7684;&#x4F4D;&#x7F6E;&#x7684;&#x6570;&#x2026;&#x2026;&#x76F4;&#x5230;&#x6700;&#x5DE6;&#x7AEF;&#x7684;&#x6570;&#x90FD;&#x6392;&#x5B8C;&#x4E86;&#x3002; &#x7279;&#x70B9;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A;O(n^2)&#x7A33;&#x5B9A;&#x6027;&#xFF1A;&#x7A33;&#x5B9A;&#x4F18;&#x70B9;&#xFF1A;&#x7B80;&#x5355;&#xFF0C;&#x597D;&#x7406;&#x89E3;&#x7F3A;&#x70B9;&#xFF1A;&#x901F;&#x5EA6;&#x6162;&#xFF0C;&#x4E0D;&#x5E38;&#x7528; &#x53C2;&#x8003;&#x4EE3;&#x7801;1234567891011121314151617181920212223242526272829303132#include&lt;iostream&gt;using namespace std;//&#x5192;&#x6CE1;&#x6392;&#x5E8F;&#x51FD;&#x6570;&#x7684;&#x5B9E;&#x73B0;void bubble_sort(int* arr, int n){ for(int i=0;i&lt;n-1;i++) { for(int j=0;j&lt;n-i-1;j++)//&#x6CE8;&#x610F;&#x8FD9;&#x91CC;&#x5224;&#x65AD;&#x6761;&#x4EF6;&#x662F;n-i-1 { if(arr[j]&gt;arr[j+1]) { //&#x6B64;&#x5904;&#x53EF;&#x4EE5;&#x7528;std::swap&#x51FD;&#x6570;&#x6765;&#x8FDB;&#x884C;&#x4EA4;&#x6362; int temp=arr[j]; arr[j]=arr[j+1]; arr[j+1]=temp; } } }}//&#x6D4B;&#x8BD5;&#x51FD;&#x6570;int main(int argc, char* argv[]){ int ls[10]={ 1,3,5,8,0,4,6,7,5,9 }; for (int i = 0; i &lt; 10; i++) cout &lt;&lt; *(ls + i);//&#x770B;&#x539F;&#x59CB;&#x6570;&#x7EC4; cout&lt;&lt; endl; bubble_sort(ls, 10);//&#x7B2C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x4F20;&#x5165;&#x6570;&#x7EC4;ls&#x7684;&#x6307;&#x9488; for (int i = 0; i &lt; 10; i++) cout &lt;&lt; *(ls + i);//&#x770B;&#x6392;&#x5E8F;&#x4E4B;&#x540E;&#x7684;&#x6570;&#x7EC4; cout&lt;&lt; endl; return 0;}]]></content>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F05%2F29%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[My First Hexo File]]></title>
    <url>%2F2019%2F05%2F29%2FMy-First-Hexo-File%2F</url>
    <content type="text"><![CDATA[&#x6211;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x535A;&#x5BA2;&#xFF0C;&#x4E3B;&#x8981;&#x7528;&#x6765;&#x5B66;&#x4E60;&#xFF0C;&#x8BB0;&#x5F55;&#x5B66;&#x4E60;&#x7B14;&#x8BB0;&#xFF0C;&#x4EE5;&#x53CA;&#x8E29;&#x5751;&#x8BB0;&#x5F55;&#x3002;]]></content>
  </entry>
</search>
